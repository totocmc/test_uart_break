
test_uart_break.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800426c  0800426c  0001426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042fc  080042fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004304  08004304  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800430c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001598  2000000c  08004318  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015a4  08004318  000215a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000beec  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b0c  00000000  00000000  0002bf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002da30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015454  00000000  00000000  0002eb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aacf  00000000  00000000  00043f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087ae7  00000000  00000000  0004ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eac  00000000  00000000  000d6584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004254 	.word	0x08004254

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004254 	.word	0x08004254

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 fb0a 	bl	8000a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f83a 	bl	80004c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 f8f0 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 8000458:	f000 f8c8 	bl	80005ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 800045c:	f000 f892 	bl	8000584 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  usartBufferOutlen = strlen((const char *)VERSION);
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <main+0x68>)
 8000462:	2215      	movs	r2, #21
 8000464:	801a      	strh	r2, [r3, #0]
  memcpy(usartBufferOut, (uint8_t *)VERSION, usartBufferOutlen);
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <main+0x68>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	001a      	movs	r2, r3
 800046c:	4911      	ldr	r1, [pc, #68]	; (80004b4 <main+0x6c>)
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <main+0x70>)
 8000470:	0018      	movs	r0, r3
 8000472:	f003 fedd 	bl	8004230 <memcpy>
  HAL_UART_Transmit_IT(&huart2, usartBufferOut, usartBufferOutlen);
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <main+0x68>)
 8000478:	881a      	ldrh	r2, [r3, #0]
 800047a:	490f      	ldr	r1, [pc, #60]	; (80004b8 <main+0x70>)
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <main+0x74>)
 800047e:	0018      	movs	r0, r3
 8000480:	f001 fda6 	bl	8001fd0 <HAL_UART_Transmit_IT>
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, usartBufferIn, MAX_USART_BUF_IN);
 8000484:	490e      	ldr	r1, [pc, #56]	; (80004c0 <main+0x78>)
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <main+0x74>)
 8000488:	2264      	movs	r2, #100	; 0x64
 800048a:	0018      	movs	r0, r3
 800048c:	f003 fe44 	bl	8004118 <HAL_UARTEx_ReceiveToIdle_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(send == 1)
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <main+0x7c>)
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d1fb      	bne.n	8000490 <main+0x48>
	  {
		  send = 0;
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <main+0x7c>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart2, usartBufferOut, usartBufferOutlen);
 800049e:	4b04      	ldr	r3, [pc, #16]	; (80004b0 <main+0x68>)
 80004a0:	881a      	ldrh	r2, [r3, #0]
 80004a2:	4905      	ldr	r1, [pc, #20]	; (80004b8 <main+0x70>)
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <main+0x74>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f001 fd92 	bl	8001fd0 <HAL_UART_Transmit_IT>
	  if(send == 1)
 80004ac:	e7f0      	b.n	8000490 <main+0x48>
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	2000159c 	.word	0x2000159c
 80004b4:	0800426c 	.word	0x0800426c
 80004b8:	20000214 	.word	0x20000214
 80004bc:	20000028 	.word	0x20000028
 80004c0:	200001ac 	.word	0x200001ac
 80004c4:	2000159e 	.word	0x2000159e

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b590      	push	{r4, r7, lr}
 80004ca:	b093      	sub	sp, #76	; 0x4c
 80004cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	2410      	movs	r4, #16
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	0018      	movs	r0, r3
 80004d4:	2338      	movs	r3, #56	; 0x38
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f003 feb2 	bl	8004242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004de:	003b      	movs	r3, r7
 80004e0:	0018      	movs	r0, r3
 80004e2:	2310      	movs	r3, #16
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f003 feab 	bl	8004242 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fff5 	bl	80014e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2202      	movs	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	0052      	lsls	r2, r2, #1
 8000502:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000504:	0021      	movs	r1, r4
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2240      	movs	r2, #64	; 0x40
 8000510:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2202      	movs	r2, #2
 8000516:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2202      	movs	r2, #2
 800051c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2208      	movs	r2, #8
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2280      	movs	r2, #128	; 0x80
 800052e:	0292      	lsls	r2, r2, #10
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2280      	movs	r2, #128	; 0x80
 8000536:	0492      	lsls	r2, r2, #18
 8000538:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800053a:	187b      	adds	r3, r7, r1
 800053c:	2280      	movs	r2, #128	; 0x80
 800053e:	0592      	lsls	r2, r2, #22
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	187b      	adds	r3, r7, r1
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f817 	bl	8001578 <HAL_RCC_OscConfig>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800054e:	f000 f943 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	003b      	movs	r3, r7
 8000554:	2207      	movs	r2, #7
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	003b      	movs	r3, r7
 800055a:	2202      	movs	r2, #2
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	003b      	movs	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	003b      	movs	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056a:	003b      	movs	r3, r7
 800056c:	2102      	movs	r1, #2
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fb1c 	bl	8001bac <HAL_RCC_ClockConfig>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000578:	f000 f92e 	bl	80007d8 <Error_Handler>
  }
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	b013      	add	sp, #76	; 0x4c
 8000582:	bd90      	pop	{r4, r7, pc}

08000584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 800058a:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <MX_USART2_UART_Init+0x64>)
 800058c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 8000590:	2296      	movs	r2, #150	; 0x96
 8000592:	0192      	lsls	r2, r2, #6
 8000594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005a8:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005aa:	220c      	movs	r2, #12
 80005ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005bc:	2200      	movs	r2, #0
 80005be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <MX_USART2_UART_Init+0x60>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fc96 	bl	8001f00 <HAL_UART_Init>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005d8:	f000 f8fe 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	20000028 	.word	0x20000028
 80005e8:	40004400 	.word	0x40004400

080005ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_DMA_Init+0x48>)
 80005f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <MX_DMA_Init+0x48>)
 80005f8:	2101      	movs	r1, #1
 80005fa:	430a      	orrs	r2, r1
 80005fc:	639a      	str	r2, [r3, #56]	; 0x38
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_DMA_Init+0x48>)
 8000600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000602:	2201      	movs	r2, #1
 8000604:	4013      	ands	r3, r2
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2009      	movs	r0, #9
 8000610:	f000 fb5a 	bl	8000cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000614:	2009      	movs	r0, #9
 8000616:	f000 fb6c 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200a      	movs	r0, #10
 8000620:	f000 fb52 	bl	8000cc8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000624:	200a      	movs	r0, #10
 8000626:	f000 fb64 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b089      	sub	sp, #36	; 0x24
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	240c      	movs	r4, #12
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f003 fdfa 	bl	8004242 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xb8>)
 8000650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000652:	4b27      	ldr	r3, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xb8>)
 8000654:	2120      	movs	r1, #32
 8000656:	430a      	orrs	r2, r1
 8000658:	635a      	str	r2, [r3, #52]	; 0x34
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xb8>)
 800065c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065e:	2220      	movs	r2, #32
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xb8>)
 8000668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xb8>)
 800066c:	2101      	movs	r1, #1
 800066e:	430a      	orrs	r2, r1
 8000670:	635a      	str	r2, [r3, #52]	; 0x34
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xb8>)
 8000674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000676:	2201      	movs	r2, #1
 8000678:	4013      	ands	r3, r2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_GPIO_Init+0xb8>)
 8000680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_GPIO_Init+0xb8>)
 8000684:	2104      	movs	r1, #4
 8000686:	430a      	orrs	r2, r1
 8000688:	635a      	str	r2, [r3, #52]	; 0x34
 800068a:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_GPIO_Init+0xb8>)
 800068c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068e:	2204      	movs	r2, #4
 8000690:	4013      	ands	r3, r2
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000696:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_GPIO_Init+0xbc>)
 8000698:	2200      	movs	r2, #0
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	0018      	movs	r0, r3
 800069e:	f000 ff01 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2204      	movs	r2, #4
 80006a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2288      	movs	r2, #136	; 0x88
 80006ac:	0352      	lsls	r2, r2, #13
 80006ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <MX_GPIO_Init+0xc0>)
 80006ba:	0019      	movs	r1, r3
 80006bc:	0010      	movs	r0, r2
 80006be:	f000 fd8d 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80006c2:	0021      	movs	r1, r4
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2240      	movs	r2, #64	; 0x40
 80006c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2201      	movs	r2, #1
 80006ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <MX_GPIO_Init+0xbc>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f000 fd7a 	bl	80011dc <HAL_GPIO_Init>

}
 80006e8:	46c0      	nop			; (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b009      	add	sp, #36	; 0x24
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	50000800 	.word	0x50000800
 80006f8:	50001400 	.word	0x50001400

080006fc <HAL_UART_ErrorCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if(&huart2 == huart)
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_UART_ErrorCallback+0x60>)
 8000708:	429a      	cmp	r2, r3
 800070a:	d121      	bne.n	8000750 <HAL_UART_ErrorCallback+0x54>
	{
		switch (huart->ErrorCode)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2290      	movs	r2, #144	; 0x90
 8000710:	589b      	ldr	r3, [r3, r2]
 8000712:	2b20      	cmp	r3, #32
 8000714:	d009      	beq.n	800072a <HAL_UART_ErrorCallback+0x2e>
 8000716:	d81c      	bhi.n	8000752 <HAL_UART_ErrorCallback+0x56>
 8000718:	2b04      	cmp	r3, #4
 800071a:	d014      	beq.n	8000746 <HAL_UART_ErrorCallback+0x4a>
 800071c:	2b08      	cmp	r3, #8
 800071e:	d118      	bne.n	8000752 <HAL_UART_ErrorCallback+0x56>
		{
		case HAL_UART_ERROR_ORE:	// Overrun error
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2208      	movs	r2, #8
 8000726:	621a      	str	r2, [r3, #32]
			//commandEngine.um.errorCode = UM_ERROR_OVERRUN;
			break;
 8000728:	e013      	b.n	8000752 <HAL_UART_ErrorCallback+0x56>

		case HAL_UART_ERROR_RTO:	// Receiver Timeout erro
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0112      	lsls	r2, r2, #4
 8000732:	621a      	str	r2, [r3, #32]
			__HAL_UART_DISABLE_IT(huart, UART_IT_RTO);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4908      	ldr	r1, [pc, #32]	; (8000760 <HAL_UART_ErrorCallback+0x64>)
 8000740:	400a      	ands	r2, r1
 8000742:	601a      	str	r2, [r3, #0]
			//commandEngine.um.errorCode = UM_ERROR_RX_TIMEOUT;
			break;
 8000744:	e005      	b.n	8000752 <HAL_UART_ErrorCallback+0x56>

		case HAL_UART_ERROR_FE:		// Frame error
			__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2202      	movs	r2, #2
 800074c:	621a      	str	r2, [r3, #32]
			//commandEngine.um.errorCode = UM_ERROR_FRAME;
			break;
 800074e:	e000      	b.n	8000752 <HAL_UART_ErrorCallback+0x56>
		}
	}
 8000750:	46c0      	nop			; (mov r8, r8)
}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	20000028 	.word	0x20000028
 8000760:	fbffffff 	.word	0xfbffffff

08000764 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	000a      	movs	r2, r1
 800076e:	1cbb      	adds	r3, r7, #2
 8000770:	801a      	strh	r2, [r3, #0]
	if(&huart2 == huart)
 8000772:	687a      	ldr	r2, [r7, #4]
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000776:	429a      	cmp	r2, r3
 8000778:	d11e      	bne.n	80007b8 <HAL_UARTEx_RxEventCallback+0x54>
	{
		usartBufferInLen = Size;
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_UARTEx_RxEventCallback+0x60>)
 800077c:	1cba      	adds	r2, r7, #2
 800077e:	8812      	ldrh	r2, [r2, #0]
 8000780:	801a      	strh	r2, [r3, #0]
		usartBufferOutlen = Size;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <HAL_UARTEx_RxEventCallback+0x64>)
 8000784:	1cba      	adds	r2, r7, #2
 8000786:	8812      	ldrh	r2, [r2, #0]
 8000788:	801a      	strh	r2, [r3, #0]
		memcpy(usartBufferOut, usartBufferIn, usartBufferInLen);
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_UARTEx_RxEventCallback+0x60>)
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	001a      	movs	r2, r3
 8000790:	490e      	ldr	r1, [pc, #56]	; (80007cc <HAL_UARTEx_RxEventCallback+0x68>)
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000794:	0018      	movs	r0, r3
 8000796:	f003 fd4b 	bl	8004230 <memcpy>
		memset(usartBufferIn, 0, MAX_USART_BUF_IN);
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_UARTEx_RxEventCallback+0x68>)
 800079c:	2264      	movs	r2, #100	; 0x64
 800079e:	2100      	movs	r1, #0
 80007a0:	0018      	movs	r0, r3
 80007a2:	f003 fd4e 	bl	8004242 <memset>
		HAL_UARTEx_ReceiveToIdle_IT(huart, usartBufferIn, MAX_USART_BUF_IN);
 80007a6:	4909      	ldr	r1, [pc, #36]	; (80007cc <HAL_UARTEx_RxEventCallback+0x68>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2264      	movs	r2, #100	; 0x64
 80007ac:	0018      	movs	r0, r3
 80007ae:	f003 fcb3 	bl	8004118 <HAL_UARTEx_ReceiveToIdle_IT>
		send = 1;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <HAL_UARTEx_RxEventCallback+0x70>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	701a      	strb	r2, [r3, #0]
	}
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	b002      	add	sp, #8
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000028 	.word	0x20000028
 80007c4:	20000210 	.word	0x20000210
 80007c8:	2000159c 	.word	0x2000159c
 80007cc:	200001ac 	.word	0x200001ac
 80007d0:	20000214 	.word	0x20000214
 80007d4:	2000159e 	.word	0x2000159e

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <HAL_MspInit+0x44>)
 80007ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <HAL_MspInit+0x44>)
 80007f0:	2101      	movs	r1, #1
 80007f2:	430a      	orrs	r2, r1
 80007f4:	641a      	str	r2, [r3, #64]	; 0x40
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <HAL_MspInit+0x44>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	2201      	movs	r2, #1
 80007fc:	4013      	ands	r3, r2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <HAL_MspInit+0x44>)
 8000804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_MspInit+0x44>)
 8000808:	2180      	movs	r1, #128	; 0x80
 800080a:	0549      	lsls	r1, r1, #21
 800080c:	430a      	orrs	r2, r1
 800080e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <HAL_MspInit+0x44>)
 8000812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	055b      	lsls	r3, r3, #21
 8000818:	4013      	ands	r3, r2
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b08b      	sub	sp, #44	; 0x2c
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	2414      	movs	r4, #20
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	2314      	movs	r3, #20
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f003 fcff 	bl	8004242 <memset>
  if(huart->Instance==USART2)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a4a      	ldr	r2, [pc, #296]	; (8000974 <HAL_UART_MspInit+0x148>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d000      	beq.n	8000850 <HAL_UART_MspInit+0x24>
 800084e:	e08c      	b.n	800096a <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000850:	4b49      	ldr	r3, [pc, #292]	; (8000978 <HAL_UART_MspInit+0x14c>)
 8000852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000854:	4b48      	ldr	r3, [pc, #288]	; (8000978 <HAL_UART_MspInit+0x14c>)
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	0289      	lsls	r1, r1, #10
 800085a:	430a      	orrs	r2, r1
 800085c:	63da      	str	r2, [r3, #60]	; 0x3c
 800085e:	4b46      	ldr	r3, [pc, #280]	; (8000978 <HAL_UART_MspInit+0x14c>)
 8000860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	029b      	lsls	r3, r3, #10
 8000866:	4013      	ands	r3, r2
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <HAL_UART_MspInit+0x14c>)
 800086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000870:	4b41      	ldr	r3, [pc, #260]	; (8000978 <HAL_UART_MspInit+0x14c>)
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	635a      	str	r2, [r3, #52]	; 0x34
 8000878:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <HAL_UART_MspInit+0x14c>)
 800087a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800087c:	2201      	movs	r2, #1
 800087e:	4013      	ands	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000884:	0021      	movs	r1, r4
 8000886:	187b      	adds	r3, r7, r1
 8000888:	220c      	movs	r2, #12
 800088a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	2202      	movs	r2, #2
 8000890:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2201      	movs	r2, #1
 8000896:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2201      	movs	r2, #1
 80008a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a4:	187a      	adds	r2, r7, r1
 80008a6:	23a0      	movs	r3, #160	; 0xa0
 80008a8:	05db      	lsls	r3, r3, #23
 80008aa:	0011      	movs	r1, r2
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 fc95 	bl	80011dc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80008b2:	4b32      	ldr	r3, [pc, #200]	; (800097c <HAL_UART_MspInit+0x150>)
 80008b4:	4a32      	ldr	r2, [pc, #200]	; (8000980 <HAL_UART_MspInit+0x154>)
 80008b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80008b8:	4b30      	ldr	r3, [pc, #192]	; (800097c <HAL_UART_MspInit+0x150>)
 80008ba:	2234      	movs	r2, #52	; 0x34
 80008bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008be:	4b2f      	ldr	r3, [pc, #188]	; (800097c <HAL_UART_MspInit+0x150>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c4:	4b2d      	ldr	r3, [pc, #180]	; (800097c <HAL_UART_MspInit+0x150>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80008ca:	4b2c      	ldr	r3, [pc, #176]	; (800097c <HAL_UART_MspInit+0x150>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d0:	4b2a      	ldr	r3, [pc, #168]	; (800097c <HAL_UART_MspInit+0x150>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d6:	4b29      	ldr	r3, [pc, #164]	; (800097c <HAL_UART_MspInit+0x150>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <HAL_UART_MspInit+0x150>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80008e2:	4b26      	ldr	r3, [pc, #152]	; (800097c <HAL_UART_MspInit+0x150>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0192      	lsls	r2, r2, #6
 80008e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_UART_MspInit+0x150>)
 80008ec:	0018      	movs	r0, r3
 80008ee:	f000 fa1d 	bl	8000d2c <HAL_DMA_Init>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80008f6:	f7ff ff6f 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_UART_MspInit+0x150>)
 8000900:	505a      	str	r2, [r3, r1]
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <HAL_UART_MspInit+0x150>)
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <HAL_UART_MspInit+0x158>)
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <HAL_UART_MspInit+0x15c>)
 800090c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000910:	2235      	movs	r2, #53	; 0x35
 8000912:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000916:	2210      	movs	r2, #16
 8000918:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800091a:	4b1a      	ldr	r3, [pc, #104]	; (8000984 <HAL_UART_MspInit+0x158>)
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000926:	4b17      	ldr	r3, [pc, #92]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_UART_MspInit+0x158>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_UART_MspInit+0x158>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000940:	0018      	movs	r0, r3
 8000942:	f000 f9f3 	bl	8000d2c <HAL_DMA_Init>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 800094a:	f7ff ff45 	bl	80007d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a0c      	ldr	r2, [pc, #48]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000952:	67da      	str	r2, [r3, #124]	; 0x7c
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <HAL_UART_MspInit+0x158>)
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	201c      	movs	r0, #28
 8000960:	f000 f9b2 	bl	8000cc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000964:	201c      	movs	r0, #28
 8000966:	f000 f9c4 	bl	8000cf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	46bd      	mov	sp, r7
 800096e:	b00b      	add	sp, #44	; 0x2c
 8000970:	bd90      	pop	{r4, r7, pc}
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	40004400 	.word	0x40004400
 8000978:	40021000 	.word	0x40021000
 800097c:	200000f4 	.word	0x200000f4
 8000980:	4002001c 	.word	0x4002001c
 8000984:	20000150 	.word	0x20000150
 8000988:	40020008 	.word	0x40020008

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800099c:	46c0      	nop			; (mov r8, r8)
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 f8c2 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <DMA1_Channel1_IRQHandler+0x14>)
 80009c2:	0018      	movs	r0, r3
 80009c4:	f000 fb08 	bl	8000fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	20000150 	.word	0x20000150

080009d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fafc 	bl	8000fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	200000f4 	.word	0x200000f4

080009ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <USART2_IRQHandler+0x14>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 fb94 	bl	8002120 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	20000028 	.word	0x20000028

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a14:	f7ff fff6 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480c      	ldr	r0, [pc, #48]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490d      	ldr	r1, [pc, #52]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0d      	ldr	r2, [pc, #52]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0a      	ldr	r4, [pc, #40]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3e:	f003 fbd3 	bl	80041e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a42:	f7ff fd01 	bl	8000448 <main>

08000a46 <LoopForever>:

LoopForever:
  b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a54:	0800430c 	.word	0x0800430c
  ldr r2, =_sbss
 8000a58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a5c:	200015a4 	.word	0x200015a4

08000a60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_IRQHandler>
	...

08000a64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <HAL_Init+0x3c>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <HAL_Init+0x3c>)
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	0049      	lsls	r1, r1, #1
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f810 	bl	8000aa4 <HAL_InitTick>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	701a      	strb	r2, [r3, #0]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff fea8 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
}
 8000a98:	0018      	movs	r0, r3
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aac:	230f      	movs	r3, #15
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ab4:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <HAL_InitTick+0x88>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d02b      	beq.n	8000b14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_InitTick+0x8c>)
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_InitTick+0x88>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	0098      	lsls	r0, r3, #2
 8000aca:	f7ff fb1b 	bl	8000104 <__udivsi3>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0020      	movs	r0, r4
 8000ad4:	f7ff fb16 	bl	8000104 <__udivsi3>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f919 	bl	8000d12 <HAL_SYSTICK_Config>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d112      	bne.n	8000b0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d80a      	bhi.n	8000b00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	2301      	movs	r3, #1
 8000aee:	425b      	negs	r3, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f8e8 	bl	8000cc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af8:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_InitTick+0x90>)
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e00d      	b.n	8000b1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e008      	b.n	8000b1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e003      	b.n	8000b1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2201      	movs	r2, #1
 8000b1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
}
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b005      	add	sp, #20
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	001a      	movs	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	18d2      	adds	r2, r2, r3
 8000b48:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	601a      	str	r2, [r3, #0]
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200015a0 	.word	0x200015a0

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	; (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	200015a0 	.word	0x200015a0

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	0002      	movs	r2, r0
 8000b78:	1dfb      	adds	r3, r7, #7
 8000b7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b7c:	1dfb      	adds	r3, r7, #7
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b7f      	cmp	r3, #127	; 0x7f
 8000b82:	d809      	bhi.n	8000b98 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	001a      	movs	r2, r3
 8000b8a:	231f      	movs	r3, #31
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__NVIC_EnableIRQ+0x30>)
 8000b90:	2101      	movs	r1, #1
 8000b92:	4091      	lsls	r1, r2
 8000b94:	000a      	movs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b98:	46c0      	nop			; (mov r8, r8)
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	b002      	add	sp, #8
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	e000e100 	.word	0xe000e100

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb8:	d828      	bhi.n	8000c0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bba:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b25b      	sxtb	r3, r3
 8000bc2:	089b      	lsrs	r3, r3, #2
 8000bc4:	33c0      	adds	r3, #192	; 0xc0
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	589b      	ldr	r3, [r3, r2]
 8000bca:	1dfa      	adds	r2, r7, #7
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	0011      	movs	r1, r2
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	400a      	ands	r2, r1
 8000bd4:	00d2      	lsls	r2, r2, #3
 8000bd6:	21ff      	movs	r1, #255	; 0xff
 8000bd8:	4091      	lsls	r1, r2
 8000bda:	000a      	movs	r2, r1
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	019b      	lsls	r3, r3, #6
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	401a      	ands	r2, r3
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	00db      	lsls	r3, r3, #3
 8000bf6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf8:	481f      	ldr	r0, [pc, #124]	; (8000c78 <__NVIC_SetPriority+0xd4>)
 8000bfa:	1dfb      	adds	r3, r7, #7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	33c0      	adds	r3, #192	; 0xc0
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c0a:	e031      	b.n	8000c70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	0019      	movs	r1, r3
 8000c14:	230f      	movs	r3, #15
 8000c16:	400b      	ands	r3, r1
 8000c18:	3b08      	subs	r3, #8
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3306      	adds	r3, #6
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	18d3      	adds	r3, r2, r3
 8000c22:	3304      	adds	r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	1dfa      	adds	r2, r7, #7
 8000c28:	7812      	ldrb	r2, [r2, #0]
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	2203      	movs	r2, #3
 8000c2e:	400a      	ands	r2, r1
 8000c30:	00d2      	lsls	r2, r2, #3
 8000c32:	21ff      	movs	r1, #255	; 0xff
 8000c34:	4091      	lsls	r1, r2
 8000c36:	000a      	movs	r2, r1
 8000c38:	43d2      	mvns	r2, r2
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	019b      	lsls	r3, r3, #6
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	401a      	ands	r2, r3
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	4003      	ands	r3, r0
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c54:	4809      	ldr	r0, [pc, #36]	; (8000c7c <__NVIC_SetPriority+0xd8>)
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	001c      	movs	r4, r3
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	4023      	ands	r3, r4
 8000c60:	3b08      	subs	r3, #8
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	430a      	orrs	r2, r1
 8000c66:	3306      	adds	r3, #6
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	18c3      	adds	r3, r0, r3
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b003      	add	sp, #12
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	045b      	lsls	r3, r3, #17
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d301      	bcc.n	8000c98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c94:	2301      	movs	r3, #1
 8000c96:	e010      	b.n	8000cba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <SysTick_Config+0x44>)
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	3a01      	subs	r2, #1
 8000c9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	425b      	negs	r3, r3
 8000ca4:	2103      	movs	r1, #3
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff ff7c 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <SysTick_Config+0x44>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <SysTick_Config+0x44>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	0018      	movs	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	210f      	movs	r1, #15
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	1c02      	adds	r2, r0, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	0002      	movs	r2, r0
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	b25b      	sxtb	r3, r3
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff33 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ffaf 	bl	8000c80 <SysTick_Config>
 8000d22:	0003      	movs	r3, r0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e077      	b.n	8000e2e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a3d      	ldr	r2, [pc, #244]	; (8000e38 <HAL_DMA_Init+0x10c>)
 8000d44:	4694      	mov	ip, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	2114      	movs	r1, #20
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f7ff f9da 	bl	8000104 <__udivsi3>
 8000d50:	0003      	movs	r3, r0
 8000d52:	009a      	lsls	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2225      	movs	r2, #37	; 0x25
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4934      	ldr	r1, [pc, #208]	; (8000e3c <HAL_DMA_Init+0x110>)
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689a      	ldr	r2, [r3, #8]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	691b      	ldr	r3, [r3, #16]
 8000d84:	431a      	orrs	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	695b      	ldr	r3, [r3, #20]
 8000d8a:	431a      	orrs	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	699b      	ldr	r3, [r3, #24]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a1b      	ldr	r3, [r3, #32]
 8000d9c:	431a      	orrs	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f000 f9c7 	bl	800113c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	01db      	lsls	r3, r3, #7
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d102      	bne.n	8000dc0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc8:	213f      	movs	r1, #63	; 0x3f
 8000dca:	400a      	ands	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000dd6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d011      	beq.n	8000e04 <HAL_DMA_Init+0xd8>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d80d      	bhi.n	8000e04 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 f9d2 	bl	8001194 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	e008      	b.n	8000e16 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2225      	movs	r2, #37	; 0x25
 8000e20:	2101      	movs	r1, #1
 8000e22:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	; 0x24
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	0018      	movs	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	bffdfff8 	.word	0xbffdfff8
 8000e3c:	ffff800f 	.word	0xffff800f

08000e40 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e050      	b.n	8000ef4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2225      	movs	r2, #37	; 0x25
 8000e56:	5c9b      	ldrb	r3, [r3, r2]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d008      	beq.n	8000e70 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2204      	movs	r2, #4
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2224      	movs	r2, #36	; 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e041      	b.n	8000ef4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	210e      	movs	r1, #14
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	491c      	ldr	r1, [pc, #112]	; (8000efc <HAL_DMA_Abort+0xbc>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_DMA_Abort+0xc0>)
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea8:	221c      	movs	r2, #28
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <HAL_DMA_Abort+0xc0>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ebe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00c      	beq.n	8000ee2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ed2:	490a      	ldr	r1, [pc, #40]	; (8000efc <HAL_DMA_Abort+0xbc>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000ee0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	; 0x25
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2224      	movs	r2, #36	; 0x24
 8000eee:	2100      	movs	r1, #0
 8000ef0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	fffffeff 	.word	0xfffffeff
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2225      	movs	r2, #37	; 0x25
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d006      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e049      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	210e      	movs	r1, #14
 8000f3a:	438a      	bics	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	438a      	bics	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	491d      	ldr	r1, [pc, #116]	; (8000fd0 <HAL_DMA_Abort_IT+0xcc>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_DMA_Abort_IT+0xd0>)
 8000f60:	6859      	ldr	r1, [r3, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	221c      	movs	r2, #28
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_DMA_Abort_IT+0xd0>)
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000f7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000f90:	490f      	ldr	r1, [pc, #60]	; (8000fd0 <HAL_DMA_Abort_IT+0xcc>)
 8000f92:	400a      	ands	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000f9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2225      	movs	r2, #37	; 0x25
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2224      	movs	r2, #36	; 0x24
 8000fac:	2100      	movs	r1, #0
 8000fae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	4798      	blx	r3
    }
  }
  return status;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b004      	add	sp, #16
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	fffffeff 	.word	0xfffffeff
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	221c      	movs	r2, #28
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	0013      	movs	r3, r2
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	4013      	ands	r3, r2
 8001000:	d027      	beq.n	8001052 <HAL_DMA_IRQHandler+0x7a>
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	4013      	ands	r3, r2
 8001008:	d023      	beq.n	8001052 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2220      	movs	r2, #32
 8001012:	4013      	ands	r3, r2
 8001014:	d107      	bne.n	8001026 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2104      	movs	r1, #4
 8001022:	438a      	bics	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001026:	4b44      	ldr	r3, [pc, #272]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 8001028:	6859      	ldr	r1, [r3, #4]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	221c      	movs	r2, #28
 8001030:	4013      	ands	r3, r2
 8001032:	2204      	movs	r2, #4
 8001034:	409a      	lsls	r2, r3
 8001036:	4b40      	ldr	r3, [pc, #256]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 8001038:	430a      	orrs	r2, r1
 800103a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001040:	2b00      	cmp	r3, #0
 8001042:	d100      	bne.n	8001046 <HAL_DMA_IRQHandler+0x6e>
 8001044:	e073      	b.n	800112e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	0010      	movs	r0, r2
 800104e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001050:	e06d      	b.n	800112e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	221c      	movs	r2, #28
 8001058:	4013      	ands	r3, r2
 800105a:	2202      	movs	r2, #2
 800105c:	409a      	lsls	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4013      	ands	r3, r2
 8001064:	d02e      	beq.n	80010c4 <HAL_DMA_IRQHandler+0xec>
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	2202      	movs	r2, #2
 800106a:	4013      	ands	r3, r2
 800106c:	d02a      	beq.n	80010c4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2220      	movs	r2, #32
 8001076:	4013      	ands	r3, r2
 8001078:	d10b      	bne.n	8001092 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	210a      	movs	r1, #10
 8001086:	438a      	bics	r2, r1
 8001088:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2225      	movs	r2, #37	; 0x25
 800108e:	2101      	movs	r1, #1
 8001090:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 8001094:	6859      	ldr	r1, [r3, #4]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	221c      	movs	r2, #28
 800109c:	4013      	ands	r3, r2
 800109e:	2202      	movs	r2, #2
 80010a0:	409a      	lsls	r2, r3
 80010a2:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2224      	movs	r2, #36	; 0x24
 80010ac:	2100      	movs	r1, #0
 80010ae:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d03a      	beq.n	800112e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	0010      	movs	r0, r2
 80010c0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80010c2:	e034      	b.n	800112e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	221c      	movs	r2, #28
 80010ca:	4013      	ands	r3, r2
 80010cc:	2208      	movs	r2, #8
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4013      	ands	r3, r2
 80010d6:	d02b      	beq.n	8001130 <HAL_DMA_IRQHandler+0x158>
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	2208      	movs	r2, #8
 80010dc:	4013      	ands	r3, r2
 80010de:	d027      	beq.n	8001130 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	210e      	movs	r1, #14
 80010ec:	438a      	bics	r2, r1
 80010ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	221c      	movs	r2, #28
 80010fa:	4013      	ands	r3, r2
 80010fc:	2201      	movs	r2, #1
 80010fe:	409a      	lsls	r2, r3
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <HAL_DMA_IRQHandler+0x160>)
 8001102:	430a      	orrs	r2, r1
 8001104:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2225      	movs	r2, #37	; 0x25
 8001110:	2101      	movs	r1, #1
 8001112:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	; 0x24
 8001118:	2100      	movs	r1, #0
 800111a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	0010      	movs	r0, r2
 800112c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46c0      	nop			; (mov r8, r8)
}
 8001132:	46bd      	mov	sp, r7
 8001134:	b004      	add	sp, #16
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40020000 	.word	0x40020000

0800113c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	4a10      	ldr	r2, [pc, #64]	; (800118c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800114c:	4694      	mov	ip, r2
 800114e:	4463      	add	r3, ip
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	001a      	movs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	001a      	movs	r2, r3
 800115e:	23ff      	movs	r3, #255	; 0xff
 8001160:	4013      	ands	r3, r2
 8001162:	3b08      	subs	r3, #8
 8001164:	2114      	movs	r1, #20
 8001166:	0018      	movs	r0, r3
 8001168:	f7fe ffcc 	bl	8000104 <__udivsi3>
 800116c:	0003      	movs	r3, r0
 800116e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a07      	ldr	r2, [pc, #28]	; (8001190 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001174:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	221f      	movs	r2, #31
 800117a:	4013      	ands	r3, r2
 800117c:	2201      	movs	r2, #1
 800117e:	409a      	lsls	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b004      	add	sp, #16
 800118a:	bd80      	pop	{r7, pc}
 800118c:	10008200 	.word	0x10008200
 8001190:	40020880 	.word	0x40020880

08001194 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	223f      	movs	r2, #63	; 0x3f
 80011a2:	4013      	ands	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4a0a      	ldr	r2, [pc, #40]	; (80011d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80011aa:	4694      	mov	ip, r2
 80011ac:	4463      	add	r3, ip
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	001a      	movs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a07      	ldr	r2, [pc, #28]	; (80011d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3b01      	subs	r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	4013      	ands	r3, r2
 80011c4:	2201      	movs	r2, #1
 80011c6:	409a      	lsls	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	659a      	str	r2, [r3, #88]	; 0x58
}
 80011cc:	46c0      	nop			; (mov r8, r8)
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b004      	add	sp, #16
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	1000823f 	.word	0x1000823f
 80011d8:	40020940 	.word	0x40020940

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e147      	b.n	800147c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	4091      	lsls	r1, r2
 80011f6:	000a      	movs	r2, r1
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d100      	bne.n	8001204 <HAL_GPIO_Init+0x28>
 8001202:	e138      	b.n	8001476 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	4013      	ands	r3, r2
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_GPIO_Init+0x40>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2203      	movs	r2, #3
 8001216:	4013      	ands	r3, r2
 8001218:	2b02      	cmp	r3, #2
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	409a      	lsls	r2, r3
 800123e:	0013      	movs	r3, r2
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	43da      	mvns	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	2201      	movs	r2, #1
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
 8001270:	0013      	movs	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2203      	movs	r2, #3
 8001284:	4013      	ands	r3, r2
 8001286:	2b03      	cmp	r3, #3
 8001288:	d017      	beq.n	80012ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	409a      	lsls	r2, r3
 8001298:	0013      	movs	r3, r2
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689a      	ldr	r2, [r3, #8]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2203      	movs	r2, #3
 80012c0:	4013      	ands	r3, r2
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d123      	bne.n	800130e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	08da      	lsrs	r2, r3, #3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3208      	adds	r2, #8
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	58d3      	ldr	r3, [r2, r3]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2207      	movs	r2, #7
 80012d8:	4013      	ands	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	409a      	lsls	r2, r3
 80012e0:	0013      	movs	r3, r2
 80012e2:	43da      	mvns	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4013      	ands	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	2107      	movs	r1, #7
 80012f2:	400b      	ands	r3, r1
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	08da      	lsrs	r2, r3, #3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3208      	adds	r2, #8
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	6939      	ldr	r1, [r7, #16]
 800130c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	409a      	lsls	r2, r3
 800131c:	0013      	movs	r3, r2
 800131e:	43da      	mvns	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4013      	ands	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2203      	movs	r2, #3
 800132c:	401a      	ands	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	409a      	lsls	r2, r3
 8001334:	0013      	movs	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	23c0      	movs	r3, #192	; 0xc0
 8001348:	029b      	lsls	r3, r3, #10
 800134a:	4013      	ands	r3, r2
 800134c:	d100      	bne.n	8001350 <HAL_GPIO_Init+0x174>
 800134e:	e092      	b.n	8001476 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001350:	4a50      	ldr	r2, [pc, #320]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3318      	adds	r3, #24
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	589b      	ldr	r3, [r3, r2]
 800135c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	2203      	movs	r2, #3
 8001362:	4013      	ands	r3, r2
 8001364:	00db      	lsls	r3, r3, #3
 8001366:	220f      	movs	r2, #15
 8001368:	409a      	lsls	r2, r3
 800136a:	0013      	movs	r3, r2
 800136c:	43da      	mvns	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	23a0      	movs	r3, #160	; 0xa0
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	429a      	cmp	r2, r3
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0x1ca>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a45      	ldr	r2, [pc, #276]	; (8001498 <HAL_GPIO_Init+0x2bc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d00d      	beq.n	80013a2 <HAL_GPIO_Init+0x1c6>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a44      	ldr	r2, [pc, #272]	; (800149c <HAL_GPIO_Init+0x2c0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d007      	beq.n	800139e <HAL_GPIO_Init+0x1c2>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <HAL_GPIO_Init+0x2c4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d101      	bne.n	800139a <HAL_GPIO_Init+0x1be>
 8001396:	2303      	movs	r3, #3
 8001398:	e006      	b.n	80013a8 <HAL_GPIO_Init+0x1cc>
 800139a:	2305      	movs	r3, #5
 800139c:	e004      	b.n	80013a8 <HAL_GPIO_Init+0x1cc>
 800139e:	2302      	movs	r3, #2
 80013a0:	e002      	b.n	80013a8 <HAL_GPIO_Init+0x1cc>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_GPIO_Init+0x1cc>
 80013a6:	2300      	movs	r3, #0
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	2103      	movs	r1, #3
 80013ac:	400a      	ands	r2, r1
 80013ae:	00d2      	lsls	r2, r2, #3
 80013b0:	4093      	lsls	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80013b8:	4936      	ldr	r1, [pc, #216]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	089b      	lsrs	r3, r3, #2
 80013be:	3318      	adds	r3, #24
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	2380      	movs	r3, #128	; 0x80
 80013dc:	035b      	lsls	r3, r3, #13
 80013de:	4013      	ands	r3, r2
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	039b      	lsls	r3, r3, #14
 8001408:	4013      	ands	r3, r2
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001414:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 800141c:	2384      	movs	r3, #132	; 0x84
 800141e:	58d3      	ldr	r3, [r2, r3]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001440:	4914      	ldr	r1, [pc, #80]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 8001442:	2284      	movs	r2, #132	; 0x84
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 800144a:	2380      	movs	r3, #128	; 0x80
 800144c:	58d3      	ldr	r3, [r2, r3]
 800144e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	4013      	ands	r3, r2
 8001464:	d003      	beq.n	800146e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800146e:	4909      	ldr	r1, [pc, #36]	; (8001494 <HAL_GPIO_Init+0x2b8>)
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	40da      	lsrs	r2, r3
 8001484:	1e13      	subs	r3, r2, #0
 8001486:	d000      	beq.n	800148a <HAL_GPIO_Init+0x2ae>
 8001488:	e6b0      	b.n	80011ec <HAL_GPIO_Init+0x10>
  }
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	b006      	add	sp, #24
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40021800 	.word	0x40021800
 8001498:	50000400 	.word	0x50000400
 800149c:	50000800 	.word	0x50000800
 80014a0:	50000c00 	.word	0x50000c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	0008      	movs	r0, r1
 80014ae:	0011      	movs	r1, r2
 80014b0:	1cbb      	adds	r3, r7, #2
 80014b2:	1c02      	adds	r2, r0, #0
 80014b4:	801a      	strh	r2, [r3, #0]
 80014b6:	1c7b      	adds	r3, r7, #1
 80014b8:	1c0a      	adds	r2, r1, #0
 80014ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014bc:	1c7b      	adds	r3, r7, #1
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014c4:	1cbb      	adds	r3, r7, #2
 80014c6:	881a      	ldrh	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ce:	1cbb      	adds	r3, r7, #2
 80014d0:	881a      	ldrh	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	46bd      	mov	sp, r7
 80014da:	b002      	add	sp, #8
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80014ee:	4013      	ands	r3, r2
 80014f0:	0019      	movs	r1, r3
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	429a      	cmp	r2, r3
 8001502:	d11f      	bne.n	8001544 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001504:	4b14      	ldr	r3, [pc, #80]	; (8001558 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	0013      	movs	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	189b      	adds	r3, r3, r2
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	4912      	ldr	r1, [pc, #72]	; (800155c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001512:	0018      	movs	r0, r3
 8001514:	f7fe fdf6 	bl	8000104 <__udivsi3>
 8001518:	0003      	movs	r3, r0
 800151a:	3301      	adds	r3, #1
 800151c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151e:	e008      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b01      	subs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	e001      	b.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e009      	b.n	8001546 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001534:	695a      	ldr	r2, [r3, #20]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	401a      	ands	r2, r3
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	429a      	cmp	r2, r3
 8001542:	d0ed      	beq.n	8001520 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40007000 	.word	0x40007000
 8001554:	fffff9ff 	.word	0xfffff9ff
 8001558:	20000000 	.word	0x20000000
 800155c:	000f4240 	.word	0x000f4240

08001560 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001564:	4b03      	ldr	r3, [pc, #12]	; (8001574 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	23e0      	movs	r3, #224	; 0xe0
 800156a:	01db      	lsls	r3, r3, #7
 800156c:	4013      	ands	r3, r2
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000

08001578 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e2fe      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2201      	movs	r2, #1
 8001590:	4013      	ands	r3, r2
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x1e>
 8001594:	e07c      	b.n	8001690 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001596:	4bc3      	ldr	r3, [pc, #780]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	2238      	movs	r2, #56	; 0x38
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a0:	4bc0      	ldr	r3, [pc, #768]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2203      	movs	r2, #3
 80015a6:	4013      	ands	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d102      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3e>
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d10b      	bne.n	80015d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	4bb9      	ldr	r3, [pc, #740]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	029b      	lsls	r3, r3, #10
 80015c4:	4013      	ands	r3, r2
 80015c6:	d062      	beq.n	800168e <HAL_RCC_OscConfig+0x116>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d15e      	bne.n	800168e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e2d9      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	429a      	cmp	r2, r3
 80015de:	d107      	bne.n	80015f0 <HAL_RCC_OscConfig+0x78>
 80015e0:	4bb0      	ldr	r3, [pc, #704]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4baf      	ldr	r3, [pc, #700]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	2180      	movs	r1, #128	; 0x80
 80015e8:	0249      	lsls	r1, r1, #9
 80015ea:	430a      	orrs	r2, r1
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e020      	b.n	8001632 <HAL_RCC_OscConfig+0xba>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	02db      	lsls	r3, r3, #11
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d10e      	bne.n	800161a <HAL_RCC_OscConfig+0xa2>
 80015fc:	4ba9      	ldr	r3, [pc, #676]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4ba8      	ldr	r3, [pc, #672]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	02c9      	lsls	r1, r1, #11
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	4ba6      	ldr	r3, [pc, #664]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4ba5      	ldr	r3, [pc, #660]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	0249      	lsls	r1, r1, #9
 8001614:	430a      	orrs	r2, r1
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e00b      	b.n	8001632 <HAL_RCC_OscConfig+0xba>
 800161a:	4ba2      	ldr	r3, [pc, #648]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4ba1      	ldr	r3, [pc, #644]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001620:	49a1      	ldr	r1, [pc, #644]	; (80018a8 <HAL_RCC_OscConfig+0x330>)
 8001622:	400a      	ands	r2, r1
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b9f      	ldr	r3, [pc, #636]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	499f      	ldr	r1, [pc, #636]	; (80018ac <HAL_RCC_OscConfig+0x334>)
 800162e:	400a      	ands	r2, r1
 8001630:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d014      	beq.n	8001664 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff fa8f 	bl	8000b5c <HAL_GetTick>
 800163e:	0003      	movs	r3, r0
 8001640:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fa8a 	bl	8000b5c <HAL_GetTick>
 8001648:	0002      	movs	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e298      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	4b93      	ldr	r3, [pc, #588]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	4013      	ands	r3, r2
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xcc>
 8001662:	e015      	b.n	8001690 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fa7a 	bl	8000b5c <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166e:	f7ff fa75 	bl	8000b5c <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b64      	cmp	r3, #100	; 0x64
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e283      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001680:	4b88      	ldr	r3, [pc, #544]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d1f0      	bne.n	800166e <HAL_RCC_OscConfig+0xf6>
 800168c:	e000      	b.n	8001690 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x124>
 800169a:	e099      	b.n	80017d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800169c:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2238      	movs	r2, #56	; 0x38
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016a6:	4b7f      	ldr	r3, [pc, #508]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	2203      	movs	r2, #3
 80016ac:	4013      	ands	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d102      	bne.n	80016bc <HAL_RCC_OscConfig+0x144>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d002      	beq.n	80016c2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d135      	bne.n	800172e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c2:	4b78      	ldr	r3, [pc, #480]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4013      	ands	r3, r2
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x162>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e256      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b72      	ldr	r3, [pc, #456]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a74      	ldr	r2, [pc, #464]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695b      	ldr	r3, [r3, #20]
 80016e8:	021a      	lsls	r2, r3, #8
 80016ea:	4b6e      	ldr	r3, [pc, #440]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d112      	bne.n	800171c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016f6:	4b6b      	ldr	r3, [pc, #428]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <HAL_RCC_OscConfig+0x33c>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	4b67      	ldr	r3, [pc, #412]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001706:	430a      	orrs	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800170a:	4b66      	ldr	r3, [pc, #408]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0adb      	lsrs	r3, r3, #11
 8001710:	2207      	movs	r2, #7
 8001712:	4013      	ands	r3, r2
 8001714:	4a68      	ldr	r2, [pc, #416]	; (80018b8 <HAL_RCC_OscConfig+0x340>)
 8001716:	40da      	lsrs	r2, r3
 8001718:	4b68      	ldr	r3, [pc, #416]	; (80018bc <HAL_RCC_OscConfig+0x344>)
 800171a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800171c:	4b68      	ldr	r3, [pc, #416]	; (80018c0 <HAL_RCC_OscConfig+0x348>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff f9bf 	bl	8000aa4 <HAL_InitTick>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d051      	beq.n	80017ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e22c      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d030      	beq.n	8001798 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001736:	4b5b      	ldr	r3, [pc, #364]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a5e      	ldr	r2, [pc, #376]	; (80018b4 <HAL_RCC_OscConfig+0x33c>)
 800173c:	4013      	ands	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	4b57      	ldr	r3, [pc, #348]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001746:	430a      	orrs	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	4b56      	ldr	r3, [pc, #344]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	4b55      	ldr	r3, [pc, #340]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0049      	lsls	r1, r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001758:	f7ff fa00 	bl	8000b5c <HAL_GetTick>
 800175c:	0003      	movs	r3, r0
 800175e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff f9fb 	bl	8000b5c <HAL_GetTick>
 8001766:	0002      	movs	r2, r0
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e209      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001774:	4b4b      	ldr	r3, [pc, #300]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	4013      	ands	r3, r2
 800177e:	d0f0      	beq.n	8001762 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b48      	ldr	r3, [pc, #288]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4a4a      	ldr	r2, [pc, #296]	; (80018b0 <HAL_RCC_OscConfig+0x338>)
 8001786:	4013      	ands	r3, r2
 8001788:	0019      	movs	r1, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	021a      	lsls	r2, r3, #8
 8001790:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	e01b      	b.n	80017d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800179e:	4949      	ldr	r1, [pc, #292]	; (80018c4 <HAL_RCC_OscConfig+0x34c>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9da 	bl	8000b5c <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff f9d5 	bl	8000b5c <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1e3      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4013      	ands	r3, r2
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x236>
 80017cc:	e000      	b.n	80017d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2208      	movs	r2, #8
 80017d6:	4013      	ands	r3, r2
 80017d8:	d047      	beq.n	800186a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2238      	movs	r2, #56	; 0x38
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b18      	cmp	r3, #24
 80017e4:	d10a      	bne.n	80017fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80017e6:	4b2f      	ldr	r3, [pc, #188]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d03c      	beq.n	800186a <HAL_RCC_OscConfig+0x2f2>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d138      	bne.n	800186a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e1c5      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d019      	beq.n	8001838 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001806:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001808:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800180a:	2101      	movs	r1, #1
 800180c:	430a      	orrs	r2, r1
 800180e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff f9a4 	bl	8000b5c <HAL_GetTick>
 8001814:	0003      	movs	r3, r0
 8001816:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff f99f 	bl	8000b5c <HAL_GetTick>
 800181e:	0002      	movs	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e1ad      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800182e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d0f1      	beq.n	800181a <HAL_RCC_OscConfig+0x2a2>
 8001836:	e018      	b.n	800186a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800183a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800183e:	2101      	movs	r1, #1
 8001840:	438a      	bics	r2, r1
 8001842:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001844:	f7ff f98a 	bl	8000b5c <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184e:	f7ff f985 	bl	8000b5c <HAL_GetTick>
 8001852:	0002      	movs	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e193      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001860:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001864:	2202      	movs	r2, #2
 8001866:	4013      	ands	r3, r2
 8001868:	d1f1      	bne.n	800184e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2204      	movs	r2, #4
 8001870:	4013      	ands	r3, r2
 8001872:	d100      	bne.n	8001876 <HAL_RCC_OscConfig+0x2fe>
 8001874:	e0c6      	b.n	8001a04 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001876:	231f      	movs	r3, #31
 8001878:	18fb      	adds	r3, r7, r3
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	4013      	ands	r3, r2
 8001886:	2b20      	cmp	r3, #32
 8001888:	d11e      	bne.n	80018c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x32c>)
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2202      	movs	r2, #2
 8001890:	4013      	ands	r3, r2
 8001892:	d100      	bne.n	8001896 <HAL_RCC_OscConfig+0x31e>
 8001894:	e0b6      	b.n	8001a04 <HAL_RCC_OscConfig+0x48c>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d000      	beq.n	80018a0 <HAL_RCC_OscConfig+0x328>
 800189e:	e0b1      	b.n	8001a04 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e171      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
 80018a4:	40021000 	.word	0x40021000
 80018a8:	fffeffff 	.word	0xfffeffff
 80018ac:	fffbffff 	.word	0xfffbffff
 80018b0:	ffff80ff 	.word	0xffff80ff
 80018b4:	ffffc7ff 	.word	0xffffc7ff
 80018b8:	00f42400 	.word	0x00f42400
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20000004 	.word	0x20000004
 80018c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80018c8:	4bb1      	ldr	r3, [pc, #708]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80018ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	055b      	lsls	r3, r3, #21
 80018d0:	4013      	ands	r3, r2
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_OscConfig+0x360>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_RCC_OscConfig+0x362>
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d011      	beq.n	8001902 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4bac      	ldr	r3, [pc, #688]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80018e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018e2:	4bab      	ldr	r3, [pc, #684]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	0549      	lsls	r1, r1, #21
 80018e8:	430a      	orrs	r2, r1
 80018ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80018ec:	4ba8      	ldr	r3, [pc, #672]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80018ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	055b      	lsls	r3, r3, #21
 80018f4:	4013      	ands	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80018fa:	231f      	movs	r3, #31
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	2201      	movs	r2, #1
 8001900:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001902:	4ba4      	ldr	r3, [pc, #656]	; (8001b94 <HAL_RCC_OscConfig+0x61c>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4013      	ands	r3, r2
 800190c:	d11a      	bne.n	8001944 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800190e:	4ba1      	ldr	r3, [pc, #644]	; (8001b94 <HAL_RCC_OscConfig+0x61c>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4ba0      	ldr	r3, [pc, #640]	; (8001b94 <HAL_RCC_OscConfig+0x61c>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0049      	lsls	r1, r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800191c:	f7ff f91e 	bl	8000b5c <HAL_GetTick>
 8001920:	0003      	movs	r3, r0
 8001922:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7ff f919 	bl	8000b5c <HAL_GetTick>
 800192a:	0002      	movs	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e127      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001938:	4b96      	ldr	r3, [pc, #600]	; (8001b94 <HAL_RCC_OscConfig+0x61c>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4013      	ands	r3, r2
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x3e2>
 800194c:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 800194e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001950:	4b8f      	ldr	r3, [pc, #572]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001952:	2101      	movs	r1, #1
 8001954:	430a      	orrs	r2, r1
 8001956:	65da      	str	r2, [r3, #92]	; 0x5c
 8001958:	e01c      	b.n	8001994 <HAL_RCC_OscConfig+0x41c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2b05      	cmp	r3, #5
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x404>
 8001962:	4b8b      	ldr	r3, [pc, #556]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001966:	4b8a      	ldr	r3, [pc, #552]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001968:	2104      	movs	r1, #4
 800196a:	430a      	orrs	r2, r1
 800196c:	65da      	str	r2, [r3, #92]	; 0x5c
 800196e:	4b88      	ldr	r3, [pc, #544]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001970:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001972:	4b87      	ldr	r3, [pc, #540]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001974:	2101      	movs	r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	65da      	str	r2, [r3, #92]	; 0x5c
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0x41c>
 800197c:	4b84      	ldr	r3, [pc, #528]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 800197e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001980:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c
 8001988:	4b81      	ldr	r3, [pc, #516]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 800198a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800198c:	4b80      	ldr	r3, [pc, #512]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 800198e:	2104      	movs	r1, #4
 8001990:	438a      	bics	r2, r1
 8001992:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d014      	beq.n	80019c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f8de 	bl	8000b5c <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019a4:	e009      	b.n	80019ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f8d9 	bl	8000b5c <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	4a79      	ldr	r2, [pc, #484]	; (8001b98 <HAL_RCC_OscConfig+0x620>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0e6      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ba:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80019bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x42e>
 80019c4:	e013      	b.n	80019ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff f8c9 	bl	8000b5c <HAL_GetTick>
 80019ca:	0003      	movs	r3, r0
 80019cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ce:	e009      	b.n	80019e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff f8c4 	bl	8000b5c <HAL_GetTick>
 80019d4:	0002      	movs	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	4a6f      	ldr	r2, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x620>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e0d1      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80019ee:	231f      	movs	r3, #31
 80019f0:	18fb      	adds	r3, r7, r3
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b65      	ldr	r3, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019fc:	4b64      	ldr	r3, [pc, #400]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 80019fe:	4967      	ldr	r1, [pc, #412]	; (8001b9c <HAL_RCC_OscConfig+0x624>)
 8001a00:	400a      	ands	r2, r1
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69db      	ldr	r3, [r3, #28]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x496>
 8001a0c:	e0bb      	b.n	8001b86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0e:	4b60      	ldr	r3, [pc, #384]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d100      	bne.n	8001a1c <HAL_RCC_OscConfig+0x4a4>
 8001a1a:	e07b      	b.n	8001b14 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d156      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b5a      	ldr	r3, [pc, #360]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b59      	ldr	r3, [pc, #356]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a2a:	495d      	ldr	r1, [pc, #372]	; (8001ba0 <HAL_RCC_OscConfig+0x628>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f894 	bl	8000b5c <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7ff f88f 	bl	8000b5c <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e09d      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	049b      	lsls	r3, r3, #18
 8001a54:	4013      	ands	r3, r2
 8001a56:	d1f0      	bne.n	8001a3a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a58:	4b4d      	ldr	r3, [pc, #308]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4a51      	ldr	r2, [pc, #324]	; (8001ba4 <HAL_RCC_OscConfig+0x62c>)
 8001a5e:	4013      	ands	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	431a      	orrs	r2, r3
 8001a86:	4b42      	ldr	r3, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b3f      	ldr	r3, [pc, #252]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	0449      	lsls	r1, r1, #17
 8001a96:	430a      	orrs	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	4b3c      	ldr	r3, [pc, #240]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0549      	lsls	r1, r1, #21
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f858 	bl	8000b5c <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f853 	bl	8000b5c <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e061      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	049b      	lsls	r3, r3, #18
 8001acc:	4013      	ands	r3, r2
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x53a>
 8001ad0:	e059      	b.n	8001b86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001ad8:	4931      	ldr	r1, [pc, #196]	; (8001ba0 <HAL_RCC_OscConfig+0x628>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff f83d 	bl	8000b5c <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f838 	bl	8000b5c <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e046      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afa:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	049b      	lsls	r3, r3, #18
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001b06:	4b22      	ldr	r3, [pc, #136]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001b0c:	4926      	ldr	r1, [pc, #152]	; (8001ba8 <HAL_RCC_OscConfig+0x630>)
 8001b0e:	400a      	ands	r2, r1
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	e038      	b.n	8001b86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e033      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <HAL_RCC_OscConfig+0x618>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d126      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2270      	movs	r2, #112	; 0x70
 8001b38:	401a      	ands	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d11f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	23fe      	movs	r3, #254	; 0xfe
 8001b46:	01db      	lsls	r3, r3, #7
 8001b48:	401a      	ands	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d116      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	23f8      	movs	r3, #248	; 0xf8
 8001b58:	039b      	lsls	r3, r3, #14
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d10e      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	23e0      	movs	r3, #224	; 0xe0
 8001b68:	051b      	lsls	r3, r3, #20
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	0f5b      	lsrs	r3, r3, #29
 8001b78:	075a      	lsls	r2, r3, #29
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e000      	b.n	8001b88 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b008      	add	sp, #32
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	40007000 	.word	0x40007000
 8001b98:	00001388 	.word	0x00001388
 8001b9c:	efffffff 	.word	0xefffffff
 8001ba0:	feffffff 	.word	0xfeffffff
 8001ba4:	11c1808c 	.word	0x11c1808c
 8001ba8:	eefefffc 	.word	0xeefefffc

08001bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e0e9      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2207      	movs	r2, #7
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d91e      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b73      	ldr	r3, [pc, #460]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001be0:	f7fe ffbc 	bl	8000b5c <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7fe ffb7 	bl	8000b5c <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_RCC_ClockConfig+0x1f4>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0ca      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bfe:	4b67      	ldr	r3, [pc, #412]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2207      	movs	r2, #7
 8001c04:	4013      	ands	r3, r2
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2202      	movs	r2, #2
 8001c12:	4013      	ands	r3, r2
 8001c14:	d015      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d006      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c20:	4b60      	ldr	r3, [pc, #384]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b5f      	ldr	r3, [pc, #380]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	21e0      	movs	r1, #224	; 0xe0
 8001c28:	01c9      	lsls	r1, r1, #7
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2e:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d057      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d107      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	029b      	lsls	r3, r3, #10
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d12b      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e097      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d107      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	049b      	lsls	r3, r3, #18
 8001c74:	4013      	ands	r3, r2
 8001c76:	d11f      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e08b      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d107      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c84:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d113      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e07f      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e074      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001caa:	4b3e      	ldr	r3, [pc, #248]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e06d      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ccc:	f7fe ff46 	bl	8000b5c <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd4:	e009      	b.n	8001cea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd6:	f7fe ff41 	bl	8000b5c <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	4a2f      	ldr	r2, [pc, #188]	; (8001da0 <HAL_RCC_ClockConfig+0x1f4>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e054      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2238      	movs	r2, #56	; 0x38
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1ec      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2207      	movs	r2, #7
 8001d02:	4013      	ands	r3, r2
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d21e      	bcs.n	8001d48 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d0a:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4393      	bics	r3, r2
 8001d12:	0019      	movs	r1, r3
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	683a      	ldr	r2, [r7, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d1c:	f7fe ff1e 	bl	8000b5c <HAL_GetTick>
 8001d20:	0003      	movs	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d26:	f7fe ff19 	bl	8000b5c <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e02c      	b.n	8001d94 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2207      	movs	r2, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1ee      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4a15      	ldr	r2, [pc, #84]	; (8001dac <HAL_RCC_ClockConfig+0x200>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d66:	f000 f829 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d6a:	0001      	movs	r1, r0
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	220f      	movs	r2, #15
 8001d74:	401a      	ands	r2, r3
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_RCC_ClockConfig+0x204>)
 8001d78:	0092      	lsls	r2, r2, #2
 8001d7a:	58d3      	ldr	r3, [r2, r3]
 8001d7c:	221f      	movs	r2, #31
 8001d7e:	4013      	ands	r3, r2
 8001d80:	000a      	movs	r2, r1
 8001d82:	40da      	lsrs	r2, r3
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x208>)
 8001d86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_ClockConfig+0x20c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7fe fe89 	bl	8000aa4 <HAL_InitTick>
 8001d92:	0003      	movs	r3, r0
}
 8001d94:	0018      	movs	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b004      	add	sp, #16
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40022000 	.word	0x40022000
 8001da0:	00001388 	.word	0x00001388
 8001da4:	40021000 	.word	0x40021000
 8001da8:	fffff0ff 	.word	0xfffff0ff
 8001dac:	ffff8fff 	.word	0xffff8fff
 8001db0:	08004284 	.word	0x08004284
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2238      	movs	r2, #56	; 0x38
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d10f      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dcc:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0adb      	lsrs	r3, r3, #11
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	0013      	movs	r3, r2
 8001ddc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dde:	6839      	ldr	r1, [r7, #0]
 8001de0:	4835      	ldr	r0, [pc, #212]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001de2:	f7fe f98f 	bl	8000104 <__udivsi3>
 8001de6:	0003      	movs	r3, r0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e05d      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2238      	movs	r2, #56	; 0x38
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x100>)
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	e054      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dfe:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2238      	movs	r2, #56	; 0x38
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d138      	bne.n	8001e7c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	4013      	ands	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	4824      	ldr	r0, [pc, #144]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x100>)
 8001e2c:	f7fe f96a 	bl	8000104 <__udivsi3>
 8001e30:	0003      	movs	r3, r0
 8001e32:	0019      	movs	r1, r3
 8001e34:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	227f      	movs	r2, #127	; 0x7f
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	434b      	muls	r3, r1
 8001e40:	617b      	str	r3, [r7, #20]
        break;
 8001e42:	e00d      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e48:	f7fe f95c 	bl	8000104 <__udivsi3>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	0019      	movs	r1, r3
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	227f      	movs	r2, #127	; 0x7f
 8001e58:	4013      	ands	r3, r2
 8001e5a:	434b      	muls	r3, r1
 8001e5c:	617b      	str	r3, [r7, #20]
        break;
 8001e5e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001e60:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0f5b      	lsrs	r3, r3, #29
 8001e66:	2207      	movs	r2, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	6978      	ldr	r0, [r7, #20]
 8001e72:	f7fe f947 	bl	8000104 <__udivsi3>
 8001e76:	0003      	movs	r3, r0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	e015      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	2238      	movs	r2, #56	; 0x38
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d103      	bne.n	8001e90 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	2238      	movs	r2, #56	; 0x38
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b18      	cmp	r3, #24
 8001e9a:	d103      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e9c:	23fa      	movs	r3, #250	; 0xfa
 8001e9e:	01db      	lsls	r3, r3, #7
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	e001      	b.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ea8:	693b      	ldr	r3, [r7, #16]
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b006      	add	sp, #24
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	00f42400 	.word	0x00f42400
 8001ebc:	007a1200 	.word	0x007a1200

08001ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec4:	4b02      	ldr	r3, [pc, #8]	; (8001ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ed8:	f7ff fff2 	bl	8001ec0 <HAL_RCC_GetHCLKFreq>
 8001edc:	0004      	movs	r4, r0
 8001ede:	f7ff fb3f 	bl	8001560 <LL_RCC_GetAPB1Prescaler>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	0b1a      	lsrs	r2, r3, #12
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	58d3      	ldr	r3, [r2, r3]
 8001eec:	221f      	movs	r2, #31
 8001eee:	4013      	ands	r3, r2
 8001ef0:	40dc      	lsrs	r4, r3
 8001ef2:	0023      	movs	r3, r4
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	080042c4 	.word	0x080042c4

08001f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e055      	b.n	8001fbe <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2288      	movs	r2, #136	; 0x88
 8001f16:	589b      	ldr	r3, [r3, r2]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d116      	bne.n	8001f4a <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2284      	movs	r2, #132	; 0x84
 8001f20:	2100      	movs	r1, #0
 8001f22:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	0018      	movs	r0, r3
 8001f28:	f000 fc66 	bl	80027f8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	22c4      	movs	r2, #196	; 0xc4
 8001f30:	589b      	ldr	r3, [r3, r2]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	21c4      	movs	r1, #196	; 0xc4
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <HAL_UART_Init+0xc8>)
 8001f3c:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	22c4      	movs	r2, #196	; 0xc4
 8001f42:	589b      	ldr	r3, [r3, r2]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	0010      	movs	r0, r2
 8001f48:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2288      	movs	r2, #136	; 0x88
 8001f4e:	2124      	movs	r1, #36	; 0x24
 8001f50:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	438a      	bics	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fc97 	bl	8002898 <UART_SetConfig>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_UART_Init+0x74>
  {
    return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e024      	b.n	8001fbe <HAL_UART_Init+0xbe>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_UART_Init+0x84>
  {
    UART_AdvFeatureConfig(huart);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 ff02 	bl	8002d88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	490f      	ldr	r1, [pc, #60]	; (8001fcc <HAL_UART_Init+0xcc>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	212a      	movs	r1, #42	; 0x2a
 8001fa0:	438a      	bics	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2101      	movs	r1, #1
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 ff9a 	bl	8002ef0 <UART_CheckIdleState>
 8001fbc:	0003      	movs	r3, r0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0800082d 	.word	0x0800082d
 8001fcc:	ffffb7ff 	.word	0xffffb7ff

08001fd0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	1dbb      	adds	r3, r7, #6
 8001fdc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2288      	movs	r2, #136	; 0x88
 8001fe2:	589b      	ldr	r3, [r3, r2]
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d000      	beq.n	8001fea <HAL_UART_Transmit_IT+0x1a>
 8001fe8:	e08d      	b.n	8002106 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_UART_Transmit_IT+0x28>
 8001ff0:	1dbb      	adds	r3, r7, #6
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e085      	b.n	8002108 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	2380      	movs	r3, #128	; 0x80
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	429a      	cmp	r2, r3
 8002006:	d109      	bne.n	800201c <HAL_UART_Transmit_IT+0x4c>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2201      	movs	r2, #1
 8002014:	4013      	ands	r3, r2
 8002016:	d001      	beq.n	800201c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e075      	b.n	8002108 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	1dba      	adds	r2, r7, #6
 8002026:	2154      	movs	r1, #84	; 0x54
 8002028:	8812      	ldrh	r2, [r2, #0]
 800202a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1dba      	adds	r2, r7, #6
 8002030:	2156      	movs	r1, #86	; 0x56
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2290      	movs	r2, #144	; 0x90
 8002040:	2100      	movs	r1, #0
 8002042:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2288      	movs	r2, #136	; 0x88
 8002048:	2121      	movs	r1, #33	; 0x21
 800204a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	059b      	lsls	r3, r3, #22
 8002054:	429a      	cmp	r2, r3
 8002056:	d12a      	bne.n	80020ae <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <HAL_UART_Transmit_IT+0xa4>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d103      	bne.n	8002074 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a28      	ldr	r2, [pc, #160]	; (8002110 <HAL_UART_Transmit_IT+0x140>)
 8002070:	679a      	str	r2, [r3, #120]	; 0x78
 8002072:	e002      	b.n	800207a <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a27      	ldr	r2, [pc, #156]	; (8002114 <HAL_UART_Transmit_IT+0x144>)
 8002078:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800207a:	f3ef 8310 	mrs	r3, PRIMASK
 800207e:	61fb      	str	r3, [r7, #28]
  return(result);
 8002080:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
 8002084:	2301      	movs	r3, #1
 8002086:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f383 8810 	msr	PRIMASK, r3
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	0409      	lsls	r1, r1, #16
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	f383 8810 	msr	PRIMASK, r3
}
 80020ac:	e029      	b.n	8002102 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d107      	bne.n	80020ca <HAL_UART_Transmit_IT+0xfa>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d103      	bne.n	80020ca <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <HAL_UART_Transmit_IT+0x148>)
 80020c6:	679a      	str	r2, [r3, #120]	; 0x78
 80020c8:	e002      	b.n	80020d0 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	4a13      	ldr	r2, [pc, #76]	; (800211c <HAL_UART_Transmit_IT+0x14c>)
 80020ce:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d0:	f3ef 8310 	mrs	r3, PRIMASK
 80020d4:	613b      	str	r3, [r7, #16]
  return(result);
 80020d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020da:	2301      	movs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f383 8810 	msr	PRIMASK, r3
}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	f383 8810 	msr	PRIMASK, r3
}
 8002100:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
  }
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b00c      	add	sp, #48	; 0x30
 800210e:	bd80      	pop	{r7, pc}
 8002110:	080036c1 	.word	0x080036c1
 8002114:	080035d5 	.word	0x080035d5
 8002118:	08003517 	.word	0x08003517
 800211c:	08003463 	.word	0x08003463

08002120 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002120:	b5b0      	push	{r4, r5, r7, lr}
 8002122:	b0aa      	sub	sp, #168	; 0xa8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	22a4      	movs	r2, #164	; 0xa4
 8002130:	18b9      	adds	r1, r7, r2
 8002132:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	20a0      	movs	r0, #160	; 0xa0
 800213c:	1839      	adds	r1, r7, r0
 800213e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	249c      	movs	r4, #156	; 0x9c
 8002148:	1939      	adds	r1, r7, r4
 800214a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800214c:	0011      	movs	r1, r2
 800214e:	18bb      	adds	r3, r7, r2
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4aa5      	ldr	r2, [pc, #660]	; (80023e8 <HAL_UART_IRQHandler+0x2c8>)
 8002154:	4013      	ands	r3, r2
 8002156:	2298      	movs	r2, #152	; 0x98
 8002158:	18bd      	adds	r5, r7, r2
 800215a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800215c:	18bb      	adds	r3, r7, r2
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d11a      	bne.n	800219a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002164:	187b      	adds	r3, r7, r1
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2220      	movs	r2, #32
 800216a:	4013      	ands	r3, r2
 800216c:	d015      	beq.n	800219a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800216e:	183b      	adds	r3, r7, r0
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2220      	movs	r2, #32
 8002174:	4013      	ands	r3, r2
 8002176:	d105      	bne.n	8002184 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002178:	193b      	adds	r3, r7, r4
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	055b      	lsls	r3, r3, #21
 8002180:	4013      	ands	r3, r2
 8002182:	d00a      	beq.n	800219a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	2b00      	cmp	r3, #0
 800218a:	d100      	bne.n	800218e <HAL_UART_IRQHandler+0x6e>
 800218c:	e2ea      	b.n	8002764 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	0010      	movs	r0, r2
 8002196:	4798      	blx	r3
      }
      return;
 8002198:	e2e4      	b.n	8002764 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800219a:	2398      	movs	r3, #152	; 0x98
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d100      	bne.n	80021a6 <HAL_UART_IRQHandler+0x86>
 80021a4:	e128      	b.n	80023f8 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80021a6:	239c      	movs	r3, #156	; 0x9c
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a8f      	ldr	r2, [pc, #572]	; (80023ec <HAL_UART_IRQHandler+0x2cc>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	d106      	bne.n	80021c0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80021b2:	23a0      	movs	r3, #160	; 0xa0
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a8d      	ldr	r2, [pc, #564]	; (80023f0 <HAL_UART_IRQHandler+0x2d0>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	d100      	bne.n	80021c0 <HAL_UART_IRQHandler+0xa0>
 80021be:	e11b      	b.n	80023f8 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80021c0:	23a4      	movs	r3, #164	; 0xa4
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d012      	beq.n	80021f2 <HAL_UART_IRQHandler+0xd2>
 80021cc:	23a0      	movs	r3, #160	; 0xa0
 80021ce:	18fb      	adds	r3, r7, r3
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	4013      	ands	r3, r2
 80021d8:	d00b      	beq.n	80021f2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2201      	movs	r2, #1
 80021e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2290      	movs	r2, #144	; 0x90
 80021e6:	589b      	ldr	r3, [r3, r2]
 80021e8:	2201      	movs	r2, #1
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2190      	movs	r1, #144	; 0x90
 80021f0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80021f2:	23a4      	movs	r3, #164	; 0xa4
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d011      	beq.n	8002222 <HAL_UART_IRQHandler+0x102>
 80021fe:	239c      	movs	r3, #156	; 0x9c
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2201      	movs	r2, #1
 8002206:	4013      	ands	r3, r2
 8002208:	d00b      	beq.n	8002222 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2202      	movs	r2, #2
 8002210:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2290      	movs	r2, #144	; 0x90
 8002216:	589b      	ldr	r3, [r3, r2]
 8002218:	2204      	movs	r2, #4
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2190      	movs	r1, #144	; 0x90
 8002220:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002222:	23a4      	movs	r3, #164	; 0xa4
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2204      	movs	r2, #4
 800222a:	4013      	ands	r3, r2
 800222c:	d011      	beq.n	8002252 <HAL_UART_IRQHandler+0x132>
 800222e:	239c      	movs	r3, #156	; 0x9c
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d00b      	beq.n	8002252 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2204      	movs	r2, #4
 8002240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2290      	movs	r2, #144	; 0x90
 8002246:	589b      	ldr	r3, [r3, r2]
 8002248:	2202      	movs	r2, #2
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2190      	movs	r1, #144	; 0x90
 8002250:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002252:	23a4      	movs	r3, #164	; 0xa4
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2208      	movs	r2, #8
 800225a:	4013      	ands	r3, r2
 800225c:	d017      	beq.n	800228e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800225e:	23a0      	movs	r3, #160	; 0xa0
 8002260:	18fb      	adds	r3, r7, r3
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2220      	movs	r2, #32
 8002266:	4013      	ands	r3, r2
 8002268:	d105      	bne.n	8002276 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800226a:	239c      	movs	r3, #156	; 0x9c
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a5e      	ldr	r2, [pc, #376]	; (80023ec <HAL_UART_IRQHandler+0x2cc>)
 8002272:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002274:	d00b      	beq.n	800228e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2208      	movs	r2, #8
 800227c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2290      	movs	r2, #144	; 0x90
 8002282:	589b      	ldr	r3, [r3, r2]
 8002284:	2208      	movs	r2, #8
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2190      	movs	r1, #144	; 0x90
 800228c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800228e:	23a4      	movs	r3, #164	; 0xa4
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	4013      	ands	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_UART_IRQHandler+0x1a4>
 800229c:	23a0      	movs	r3, #160	; 0xa0
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	2380      	movs	r3, #128	; 0x80
 80022a4:	04db      	lsls	r3, r3, #19
 80022a6:	4013      	ands	r3, r2
 80022a8:	d00c      	beq.n	80022c4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2280      	movs	r2, #128	; 0x80
 80022b0:	0112      	lsls	r2, r2, #4
 80022b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2290      	movs	r2, #144	; 0x90
 80022b8:	589b      	ldr	r3, [r3, r2]
 80022ba:	2220      	movs	r2, #32
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2190      	movs	r1, #144	; 0x90
 80022c2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2290      	movs	r2, #144	; 0x90
 80022c8:	589b      	ldr	r3, [r3, r2]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d100      	bne.n	80022d0 <HAL_UART_IRQHandler+0x1b0>
 80022ce:	e24b      	b.n	8002768 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80022d0:	23a4      	movs	r3, #164	; 0xa4
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d015      	beq.n	8002308 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80022dc:	23a0      	movs	r3, #160	; 0xa0
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	4013      	ands	r3, r2
 80022e6:	d106      	bne.n	80022f6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80022e8:	239c      	movs	r3, #156	; 0x9c
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	055b      	lsls	r3, r3, #21
 80022f2:	4013      	ands	r3, r2
 80022f4:	d008      	beq.n	8002308 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d004      	beq.n	8002308 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	0010      	movs	r0, r2
 8002306:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2290      	movs	r2, #144	; 0x90
 800230c:	589b      	ldr	r3, [r3, r2]
 800230e:	2194      	movs	r1, #148	; 0x94
 8002310:	187a      	adds	r2, r7, r1
 8002312:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2240      	movs	r2, #64	; 0x40
 800231c:	4013      	ands	r3, r2
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d004      	beq.n	800232c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002322:	187b      	adds	r3, r7, r1
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2228      	movs	r2, #40	; 0x28
 8002328:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800232a:	d050      	beq.n	80023ce <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	0018      	movs	r0, r3
 8002330:	f001 f818 	bl	8003364 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	4013      	ands	r3, r2
 800233e:	2b40      	cmp	r3, #64	; 0x40
 8002340:	d13e      	bne.n	80023c0 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002342:	f3ef 8310 	mrs	r3, PRIMASK
 8002346:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800234a:	2090      	movs	r0, #144	; 0x90
 800234c:	183a      	adds	r2, r7, r0
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	2301      	movs	r3, #1
 8002352:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002356:	f383 8810 	msr	PRIMASK, r3
}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2140      	movs	r1, #64	; 0x40
 8002368:	438a      	bics	r2, r1
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	183b      	adds	r3, r7, r0
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002374:	f383 8810 	msr	PRIMASK, r3
}
 8002378:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2280      	movs	r2, #128	; 0x80
 800237e:	589b      	ldr	r3, [r3, r2]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	589b      	ldr	r3, [r3, r2]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_UART_IRQHandler+0x2d4>)
 800238c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	589b      	ldr	r3, [r3, r2]
 8002394:	0018      	movs	r0, r3
 8002396:	f7fe fdb5 	bl	8000f04 <HAL_DMA_Abort_IT>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d022      	beq.n	80023e4 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	589b      	ldr	r3, [r3, r2]
 80023a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	2180      	movs	r1, #128	; 0x80
 80023aa:	5852      	ldr	r2, [r2, r1]
 80023ac:	0010      	movs	r0, r2
 80023ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	e018      	b.n	80023e4 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	22a4      	movs	r2, #164	; 0xa4
 80023b6:	589b      	ldr	r3, [r3, r2]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	0010      	movs	r0, r2
 80023bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023be:	e011      	b.n	80023e4 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	22a4      	movs	r2, #164	; 0xa4
 80023c4:	589b      	ldr	r3, [r3, r2]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	0010      	movs	r0, r2
 80023ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	e00a      	b.n	80023e4 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	22a4      	movs	r2, #164	; 0xa4
 80023d2:	589b      	ldr	r3, [r3, r2]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	0010      	movs	r0, r2
 80023d8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2290      	movs	r2, #144	; 0x90
 80023de:	2100      	movs	r1, #0
 80023e0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80023e2:	e1c1      	b.n	8002768 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023e4:	46c0      	nop			; (mov r8, r8)
    return;
 80023e6:	e1bf      	b.n	8002768 <HAL_UART_IRQHandler+0x648>
 80023e8:	0000080f 	.word	0x0000080f
 80023ec:	10000001 	.word	0x10000001
 80023f0:	04000120 	.word	0x04000120
 80023f4:	08003431 	.word	0x08003431

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d000      	beq.n	8002402 <HAL_UART_IRQHandler+0x2e2>
 8002400:	e140      	b.n	8002684 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002402:	23a4      	movs	r3, #164	; 0xa4
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2210      	movs	r2, #16
 800240a:	4013      	ands	r3, r2
 800240c:	d100      	bne.n	8002410 <HAL_UART_IRQHandler+0x2f0>
 800240e:	e139      	b.n	8002684 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002410:	23a0      	movs	r3, #160	; 0xa0
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2210      	movs	r2, #16
 8002418:	4013      	ands	r3, r2
 800241a:	d100      	bne.n	800241e <HAL_UART_IRQHandler+0x2fe>
 800241c:	e132      	b.n	8002684 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2240      	movs	r2, #64	; 0x40
 800242e:	4013      	ands	r3, r2
 8002430:	2b40      	cmp	r3, #64	; 0x40
 8002432:	d000      	beq.n	8002436 <HAL_UART_IRQHandler+0x316>
 8002434:	e0a5      	b.n	8002582 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	589b      	ldr	r3, [r3, r2]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	217e      	movs	r1, #126	; 0x7e
 8002442:	187b      	adds	r3, r7, r1
 8002444:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002446:	187b      	adds	r3, r7, r1
 8002448:	881b      	ldrh	r3, [r3, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d100      	bne.n	8002450 <HAL_UART_IRQHandler+0x330>
 800244e:	e18d      	b.n	800276c <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	225c      	movs	r2, #92	; 0x5c
 8002454:	5a9b      	ldrh	r3, [r3, r2]
 8002456:	187a      	adds	r2, r7, r1
 8002458:	8812      	ldrh	r2, [r2, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d300      	bcc.n	8002460 <HAL_UART_IRQHandler+0x340>
 800245e:	e185      	b.n	800276c <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	187a      	adds	r2, r7, r1
 8002464:	215e      	movs	r1, #94	; 0x5e
 8002466:	8812      	ldrh	r2, [r2, #0]
 8002468:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	589b      	ldr	r3, [r3, r2]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2220      	movs	r2, #32
 8002476:	4013      	ands	r3, r2
 8002478:	d170      	bne.n	800255c <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800247a:	f3ef 8310 	mrs	r3, PRIMASK
 800247e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002482:	67bb      	str	r3, [r7, #120]	; 0x78
 8002484:	2301      	movs	r3, #1
 8002486:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	f383 8810 	msr	PRIMASK, r3
}
 800248e:	46c0      	nop			; (mov r8, r8)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	49b8      	ldr	r1, [pc, #736]	; (800277c <HAL_UART_IRQHandler+0x65c>)
 800249c:	400a      	ands	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024a6:	f383 8810 	msr	PRIMASK, r3
}
 80024aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ac:	f3ef 8310 	mrs	r3, PRIMASK
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80024b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b4:	677b      	str	r3, [r7, #116]	; 0x74
 80024b6:	2301      	movs	r3, #1
 80024b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024bc:	f383 8810 	msr	PRIMASK, r3
}
 80024c0:	46c0      	nop			; (mov r8, r8)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2101      	movs	r1, #1
 80024ce:	438a      	bics	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d8:	f383 8810 	msr	PRIMASK, r3
}
 80024dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024de:	f3ef 8310 	mrs	r3, PRIMASK
 80024e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80024e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024e6:	673b      	str	r3, [r7, #112]	; 0x70
 80024e8:	2301      	movs	r3, #1
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	f383 8810 	msr	PRIMASK, r3
}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	438a      	bics	r2, r1
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002506:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250a:	f383 8810 	msr	PRIMASK, r3
}
 800250e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	228c      	movs	r2, #140	; 0x8c
 8002514:	2120      	movs	r1, #32
 8002516:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251e:	f3ef 8310 	mrs	r3, PRIMASK
 8002522:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002524:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002526:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002528:	2301      	movs	r3, #1
 800252a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800252e:	f383 8810 	msr	PRIMASK, r3
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2110      	movs	r1, #16
 8002540:	438a      	bics	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002546:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254a:	f383 8810 	msr	PRIMASK, r3
}
 800254e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2280      	movs	r2, #128	; 0x80
 8002554:	589b      	ldr	r3, [r3, r2]
 8002556:	0018      	movs	r0, r3
 8002558:	f7fe fc72 	bl	8000e40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2202      	movs	r2, #2
 8002560:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	22c0      	movs	r2, #192	; 0xc0
 8002566:	589b      	ldr	r3, [r3, r2]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	215c      	movs	r1, #92	; 0x5c
 800256c:	5a51      	ldrh	r1, [r2, r1]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	205e      	movs	r0, #94	; 0x5e
 8002572:	5a12      	ldrh	r2, [r2, r0]
 8002574:	b292      	uxth	r2, r2
 8002576:	1a8a      	subs	r2, r1, r2
 8002578:	b291      	uxth	r1, r2
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	0010      	movs	r0, r2
 800257e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002580:	e0f4      	b.n	800276c <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	225c      	movs	r2, #92	; 0x5c
 8002586:	5a99      	ldrh	r1, [r3, r2]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	225e      	movs	r2, #94	; 0x5e
 800258c:	5a9b      	ldrh	r3, [r3, r2]
 800258e:	b29a      	uxth	r2, r3
 8002590:	208e      	movs	r0, #142	; 0x8e
 8002592:	183b      	adds	r3, r7, r0
 8002594:	1a8a      	subs	r2, r1, r2
 8002596:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	225e      	movs	r2, #94	; 0x5e
 800259c:	5a9b      	ldrh	r3, [r3, r2]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d100      	bne.n	80025a6 <HAL_UART_IRQHandler+0x486>
 80025a4:	e0e4      	b.n	8002770 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 80025a6:	183b      	adds	r3, r7, r0
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d100      	bne.n	80025b0 <HAL_UART_IRQHandler+0x490>
 80025ae:	e0df      	b.n	8002770 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80025b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80025b8:	2488      	movs	r4, #136	; 0x88
 80025ba:	193a      	adds	r2, r7, r4
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	2301      	movs	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f383 8810 	msr	PRIMASK, r3
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	496a      	ldr	r1, [pc, #424]	; (8002780 <HAL_UART_IRQHandler+0x660>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	193b      	adds	r3, r7, r4
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f383 8810 	msr	PRIMASK, r3
}
 80025e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025e8:	f3ef 8310 	mrs	r3, PRIMASK
 80025ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80025ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80025f0:	2484      	movs	r4, #132	; 0x84
 80025f2:	193a      	adds	r2, r7, r4
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	2301      	movs	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f383 8810 	msr	PRIMASK, r3
}
 8002600:	46c0      	nop			; (mov r8, r8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	495d      	ldr	r1, [pc, #372]	; (8002784 <HAL_UART_IRQHandler+0x664>)
 800260e:	400a      	ands	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	193b      	adds	r3, r7, r4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002618:	6a3b      	ldr	r3, [r7, #32]
 800261a:	f383 8810 	msr	PRIMASK, r3
}
 800261e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	228c      	movs	r2, #140	; 0x8c
 8002624:	2120      	movs	r1, #32
 8002626:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002634:	f3ef 8310 	mrs	r3, PRIMASK
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800263c:	2480      	movs	r4, #128	; 0x80
 800263e:	193a      	adds	r2, r7, r4
 8002640:	6013      	str	r3, [r2, #0]
 8002642:	2301      	movs	r3, #1
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002648:	f383 8810 	msr	PRIMASK, r3
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2110      	movs	r1, #16
 800265a:	438a      	bics	r2, r1
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	193b      	adds	r3, r7, r4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	f383 8810 	msr	PRIMASK, r3
}
 800266a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	22c0      	movs	r2, #192	; 0xc0
 8002676:	589b      	ldr	r3, [r3, r2]
 8002678:	183a      	adds	r2, r7, r0
 800267a:	8811      	ldrh	r1, [r2, #0]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	0010      	movs	r0, r2
 8002680:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002682:	e075      	b.n	8002770 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002684:	23a4      	movs	r3, #164	; 0xa4
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	035b      	lsls	r3, r3, #13
 800268e:	4013      	ands	r3, r2
 8002690:	d012      	beq.n	80026b8 <HAL_UART_IRQHandler+0x598>
 8002692:	239c      	movs	r3, #156	; 0x9c
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	03db      	lsls	r3, r3, #15
 800269c:	4013      	ands	r3, r2
 800269e:	d00b      	beq.n	80026b8 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2280      	movs	r2, #128	; 0x80
 80026a6:	0352      	lsls	r2, r2, #13
 80026a8:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	22b4      	movs	r2, #180	; 0xb4
 80026ae:	589b      	ldr	r3, [r3, r2]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	0010      	movs	r0, r2
 80026b4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026b6:	e05e      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80026b8:	23a4      	movs	r3, #164	; 0xa4
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	4013      	ands	r3, r2
 80026c2:	d016      	beq.n	80026f2 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80026c4:	23a0      	movs	r3, #160	; 0xa0
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	4013      	ands	r3, r2
 80026ce:	d106      	bne.n	80026de <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80026d0:	239c      	movs	r3, #156	; 0x9c
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	041b      	lsls	r3, r3, #16
 80026da:	4013      	ands	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d046      	beq.n	8002774 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	0010      	movs	r0, r2
 80026ee:	4798      	blx	r3
    }
    return;
 80026f0:	e040      	b.n	8002774 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80026f2:	23a4      	movs	r3, #164	; 0xa4
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2240      	movs	r2, #64	; 0x40
 80026fa:	4013      	ands	r3, r2
 80026fc:	d00a      	beq.n	8002714 <HAL_UART_IRQHandler+0x5f4>
 80026fe:	23a0      	movs	r3, #160	; 0xa0
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2240      	movs	r2, #64	; 0x40
 8002706:	4013      	ands	r3, r2
 8002708:	d004      	beq.n	8002714 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	0018      	movs	r0, r3
 800270e:	f001 f851 	bl	80037b4 <UART_EndTransmit_IT>
    return;
 8002712:	e030      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002714:	23a4      	movs	r3, #164	; 0xa4
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	4013      	ands	r3, r2
 8002720:	d00d      	beq.n	800273e <HAL_UART_IRQHandler+0x61e>
 8002722:	23a0      	movs	r3, #160	; 0xa0
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	05db      	lsls	r3, r3, #23
 800272c:	4013      	ands	r3, r2
 800272e:	d006      	beq.n	800273e <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	22bc      	movs	r2, #188	; 0xbc
 8002734:	589b      	ldr	r3, [r3, r2]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	0010      	movs	r0, r2
 800273a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800273c:	e01b      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800273e:	23a4      	movs	r3, #164	; 0xa4
 8002740:	18fb      	adds	r3, r7, r3
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	045b      	lsls	r3, r3, #17
 8002748:	4013      	ands	r3, r2
 800274a:	d014      	beq.n	8002776 <HAL_UART_IRQHandler+0x656>
 800274c:	23a0      	movs	r3, #160	; 0xa0
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da0f      	bge.n	8002776 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	22b8      	movs	r2, #184	; 0xb8
 800275a:	589b      	ldr	r3, [r3, r2]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	0010      	movs	r0, r2
 8002760:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002762:	e008      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
      return;
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	e006      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
    return;
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	e004      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
      return;
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	e002      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
      return;
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	e000      	b.n	8002776 <HAL_UART_IRQHandler+0x656>
    return;
 8002774:	46c0      	nop			; (mov r8, r8)
  }
}
 8002776:	46bd      	mov	sp, r7
 8002778:	b02a      	add	sp, #168	; 0xa8
 800277a:	bdb0      	pop	{r4, r5, r7, pc}
 800277c:	fffffeff 	.word	0xfffffeff
 8002780:	fffffedf 	.word	0xfffffedf
 8002784:	effffffe 	.word	0xeffffffe

08002788 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002790:	46c0      	nop			; (mov r8, r8)
 8002792:	46bd      	mov	sp, r7
 8002794:	b002      	add	sp, #8
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80027b0:	46c0      	nop			; (mov r8, r8)
 80027b2:	46bd      	mov	sp, r7
 80027b4:	b002      	add	sp, #8
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80027c0:	46c0      	nop			; (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b002      	add	sp, #8
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2194      	movs	r1, #148	; 0x94
 8002804:	4a18      	ldr	r2, [pc, #96]	; (8002868 <UART_InitCallbacksToDefault+0x70>)
 8002806:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2198      	movs	r1, #152	; 0x98
 800280c:	4a17      	ldr	r2, [pc, #92]	; (800286c <UART_InitCallbacksToDefault+0x74>)
 800280e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	219c      	movs	r1, #156	; 0x9c
 8002814:	4a16      	ldr	r2, [pc, #88]	; (8002870 <UART_InitCallbacksToDefault+0x78>)
 8002816:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	21a0      	movs	r1, #160	; 0xa0
 800281c:	4a15      	ldr	r2, [pc, #84]	; (8002874 <UART_InitCallbacksToDefault+0x7c>)
 800281e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	21a4      	movs	r1, #164	; 0xa4
 8002824:	4a14      	ldr	r2, [pc, #80]	; (8002878 <UART_InitCallbacksToDefault+0x80>)
 8002826:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	21a8      	movs	r1, #168	; 0xa8
 800282c:	4a13      	ldr	r2, [pc, #76]	; (800287c <UART_InitCallbacksToDefault+0x84>)
 800282e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	21ac      	movs	r1, #172	; 0xac
 8002834:	4a12      	ldr	r2, [pc, #72]	; (8002880 <UART_InitCallbacksToDefault+0x88>)
 8002836:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	21b0      	movs	r1, #176	; 0xb0
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <UART_InitCallbacksToDefault+0x8c>)
 800283e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	21b4      	movs	r1, #180	; 0xb4
 8002844:	4a10      	ldr	r2, [pc, #64]	; (8002888 <UART_InitCallbacksToDefault+0x90>)
 8002846:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	21b8      	movs	r1, #184	; 0xb8
 800284c:	4a0f      	ldr	r2, [pc, #60]	; (800288c <UART_InitCallbacksToDefault+0x94>)
 800284e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	21bc      	movs	r1, #188	; 0xbc
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <UART_InitCallbacksToDefault+0x98>)
 8002856:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	21c0      	movs	r1, #192	; 0xc0
 800285c:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <UART_InitCallbacksToDefault+0x9c>)
 800285e:	505a      	str	r2, [r3, r1]

}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	b002      	add	sp, #8
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08002799 	.word	0x08002799
 800286c:	08002789 	.word	0x08002789
 8002870:	080027b9 	.word	0x080027b9
 8002874:	080027a9 	.word	0x080027a9
 8002878:	080006fd 	.word	0x080006fd
 800287c:	080027c9 	.word	0x080027c9
 8002880:	080027d9 	.word	0x080027d9
 8002884:	080027e9 	.word	0x080027e9
 8002888:	080040e9 	.word	0x080040e9
 800288c:	080040f9 	.word	0x080040f9
 8002890:	08004109 	.word	0x08004109
 8002894:	08000765 	.word	0x08000765

08002898 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b090      	sub	sp, #64	; 0x40
 800289c:	af00      	add	r7, sp, #0
 800289e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028a0:	231a      	movs	r3, #26
 80028a2:	2220      	movs	r2, #32
 80028a4:	189b      	adds	r3, r3, r2
 80028a6:	19db      	adds	r3, r3, r7
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4ac4      	ldr	r2, [pc, #784]	; (8002bdc <UART_SetConfig+0x344>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	430b      	orrs	r3, r1
 80028d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4abf      	ldr	r2, [pc, #764]	; (8002be0 <UART_SetConfig+0x348>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	0018      	movs	r0, r3
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	68d9      	ldr	r1, [r3, #12]
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	0003      	movs	r3, r0
 80028f0:	430b      	orrs	r3, r1
 80028f2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4ab9      	ldr	r2, [pc, #740]	; (8002be4 <UART_SetConfig+0x34c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d004      	beq.n	800290e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800290a:	4313      	orrs	r3, r2
 800290c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	4ab4      	ldr	r2, [pc, #720]	; (8002be8 <UART_SetConfig+0x350>)
 8002916:	4013      	ands	r3, r2
 8002918:	0019      	movs	r1, r3
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	430b      	orrs	r3, r1
 8002922:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	220f      	movs	r2, #15
 800292c:	4393      	bics	r3, r2
 800292e:	0018      	movs	r0, r3
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	0003      	movs	r3, r0
 800293a:	430b      	orrs	r3, r1
 800293c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4aaa      	ldr	r2, [pc, #680]	; (8002bec <UART_SetConfig+0x354>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d131      	bne.n	80029ac <UART_SetConfig+0x114>
 8002948:	4ba9      	ldr	r3, [pc, #676]	; (8002bf0 <UART_SetConfig+0x358>)
 800294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294c:	2203      	movs	r2, #3
 800294e:	4013      	ands	r3, r2
 8002950:	2b03      	cmp	r3, #3
 8002952:	d01d      	beq.n	8002990 <UART_SetConfig+0xf8>
 8002954:	d823      	bhi.n	800299e <UART_SetConfig+0x106>
 8002956:	2b02      	cmp	r3, #2
 8002958:	d00c      	beq.n	8002974 <UART_SetConfig+0xdc>
 800295a:	d820      	bhi.n	800299e <UART_SetConfig+0x106>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <UART_SetConfig+0xce>
 8002960:	2b01      	cmp	r3, #1
 8002962:	d00e      	beq.n	8002982 <UART_SetConfig+0xea>
 8002964:	e01b      	b.n	800299e <UART_SetConfig+0x106>
 8002966:	231b      	movs	r3, #27
 8002968:	2220      	movs	r2, #32
 800296a:	189b      	adds	r3, r3, r2
 800296c:	19db      	adds	r3, r3, r7
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e071      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002974:	231b      	movs	r3, #27
 8002976:	2220      	movs	r2, #32
 8002978:	189b      	adds	r3, r3, r2
 800297a:	19db      	adds	r3, r3, r7
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e06a      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002982:	231b      	movs	r3, #27
 8002984:	2220      	movs	r2, #32
 8002986:	189b      	adds	r3, r3, r2
 8002988:	19db      	adds	r3, r3, r7
 800298a:	2204      	movs	r2, #4
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e063      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002990:	231b      	movs	r3, #27
 8002992:	2220      	movs	r2, #32
 8002994:	189b      	adds	r3, r3, r2
 8002996:	19db      	adds	r3, r3, r7
 8002998:	2208      	movs	r2, #8
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e05c      	b.n	8002a58 <UART_SetConfig+0x1c0>
 800299e:	231b      	movs	r3, #27
 80029a0:	2220      	movs	r2, #32
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	19db      	adds	r3, r3, r7
 80029a6:	2210      	movs	r2, #16
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e055      	b.n	8002a58 <UART_SetConfig+0x1c0>
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <UART_SetConfig+0x35c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d106      	bne.n	80029c4 <UART_SetConfig+0x12c>
 80029b6:	231b      	movs	r3, #27
 80029b8:	2220      	movs	r2, #32
 80029ba:	189b      	adds	r3, r3, r2
 80029bc:	19db      	adds	r3, r3, r7
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
 80029c2:	e049      	b.n	8002a58 <UART_SetConfig+0x1c0>
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a86      	ldr	r2, [pc, #536]	; (8002be4 <UART_SetConfig+0x34c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13e      	bne.n	8002a4c <UART_SetConfig+0x1b4>
 80029ce:	4b88      	ldr	r3, [pc, #544]	; (8002bf0 <UART_SetConfig+0x358>)
 80029d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80029d2:	23c0      	movs	r3, #192	; 0xc0
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	4013      	ands	r3, r2
 80029d8:	22c0      	movs	r2, #192	; 0xc0
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	4293      	cmp	r3, r2
 80029de:	d027      	beq.n	8002a30 <UART_SetConfig+0x198>
 80029e0:	22c0      	movs	r2, #192	; 0xc0
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d82a      	bhi.n	8002a3e <UART_SetConfig+0x1a6>
 80029e8:	2280      	movs	r2, #128	; 0x80
 80029ea:	0112      	lsls	r2, r2, #4
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d011      	beq.n	8002a14 <UART_SetConfig+0x17c>
 80029f0:	2280      	movs	r2, #128	; 0x80
 80029f2:	0112      	lsls	r2, r2, #4
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d822      	bhi.n	8002a3e <UART_SetConfig+0x1a6>
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d004      	beq.n	8002a06 <UART_SetConfig+0x16e>
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	00d2      	lsls	r2, r2, #3
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00e      	beq.n	8002a22 <UART_SetConfig+0x18a>
 8002a04:	e01b      	b.n	8002a3e <UART_SetConfig+0x1a6>
 8002a06:	231b      	movs	r3, #27
 8002a08:	2220      	movs	r2, #32
 8002a0a:	189b      	adds	r3, r3, r2
 8002a0c:	19db      	adds	r3, r3, r7
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e021      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a14:	231b      	movs	r3, #27
 8002a16:	2220      	movs	r2, #32
 8002a18:	189b      	adds	r3, r3, r2
 8002a1a:	19db      	adds	r3, r3, r7
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e01a      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a22:	231b      	movs	r3, #27
 8002a24:	2220      	movs	r2, #32
 8002a26:	189b      	adds	r3, r3, r2
 8002a28:	19db      	adds	r3, r3, r7
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	e013      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a30:	231b      	movs	r3, #27
 8002a32:	2220      	movs	r2, #32
 8002a34:	189b      	adds	r3, r3, r2
 8002a36:	19db      	adds	r3, r3, r7
 8002a38:	2208      	movs	r2, #8
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e00c      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2220      	movs	r2, #32
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	2210      	movs	r2, #16
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e005      	b.n	8002a58 <UART_SetConfig+0x1c0>
 8002a4c:	231b      	movs	r3, #27
 8002a4e:	2220      	movs	r2, #32
 8002a50:	189b      	adds	r3, r3, r2
 8002a52:	19db      	adds	r3, r3, r7
 8002a54:	2210      	movs	r2, #16
 8002a56:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a61      	ldr	r2, [pc, #388]	; (8002be4 <UART_SetConfig+0x34c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d000      	beq.n	8002a64 <UART_SetConfig+0x1cc>
 8002a62:	e092      	b.n	8002b8a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a64:	231b      	movs	r3, #27
 8002a66:	2220      	movs	r2, #32
 8002a68:	189b      	adds	r3, r3, r2
 8002a6a:	19db      	adds	r3, r3, r7
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d015      	beq.n	8002a9e <UART_SetConfig+0x206>
 8002a72:	dc18      	bgt.n	8002aa6 <UART_SetConfig+0x20e>
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d00d      	beq.n	8002a94 <UART_SetConfig+0x1fc>
 8002a78:	dc15      	bgt.n	8002aa6 <UART_SetConfig+0x20e>
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <UART_SetConfig+0x1ec>
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d005      	beq.n	8002a8e <UART_SetConfig+0x1f6>
 8002a82:	e010      	b.n	8002aa6 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a84:	f7ff fa26 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002a88:	0003      	movs	r3, r0
 8002a8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a8c:	e014      	b.n	8002ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a8e:	4b5a      	ldr	r3, [pc, #360]	; (8002bf8 <UART_SetConfig+0x360>)
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a92:	e011      	b.n	8002ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a94:	f7ff f992 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002aaa:	231a      	movs	r3, #26
 8002aac:	2220      	movs	r2, #32
 8002aae:	189b      	adds	r3, r3, r2
 8002ab0:	19db      	adds	r3, r3, r7
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
        break;
 8002ab6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d100      	bne.n	8002ac0 <UART_SetConfig+0x228>
 8002abe:	e147      	b.n	8002d50 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ac4:	4b4d      	ldr	r3, [pc, #308]	; (8002bfc <UART_SetConfig+0x364>)
 8002ac6:	0052      	lsls	r2, r2, #1
 8002ac8:	5ad3      	ldrh	r3, [r2, r3]
 8002aca:	0019      	movs	r1, r3
 8002acc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ace:	f7fd fb19 	bl	8000104 <__udivsi3>
 8002ad2:	0003      	movs	r3, r0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	0013      	movs	r3, r2
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d305      	bcc.n	8002af2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d906      	bls.n	8002b00 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8002af2:	231a      	movs	r3, #26
 8002af4:	2220      	movs	r2, #32
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e127      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <UART_SetConfig+0x364>)
 8002b0e:	0052      	lsls	r2, r2, #1
 8002b10:	5ad3      	ldrh	r3, [r2, r3]
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	69b8      	ldr	r0, [r7, #24]
 8002b1e:	69f9      	ldr	r1, [r7, #28]
 8002b20:	f7fd fb7c 	bl	800021c <__aeabi_uldivmod>
 8002b24:	0002      	movs	r2, r0
 8002b26:	000b      	movs	r3, r1
 8002b28:	0e11      	lsrs	r1, r2, #24
 8002b2a:	021d      	lsls	r5, r3, #8
 8002b2c:	430d      	orrs	r5, r1
 8002b2e:	0214      	lsls	r4, r2, #8
 8002b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68b8      	ldr	r0, [r7, #8]
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	1900      	adds	r0, r0, r4
 8002b42:	4169      	adcs	r1, r5
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	607b      	str	r3, [r7, #4]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f7fd fb63 	bl	800021c <__aeabi_uldivmod>
 8002b56:	0002      	movs	r2, r0
 8002b58:	000b      	movs	r3, r1
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b60:	23c0      	movs	r3, #192	; 0xc0
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d309      	bcc.n	8002b7c <UART_SetConfig+0x2e4>
 8002b68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b6a:	2380      	movs	r3, #128	; 0x80
 8002b6c:	035b      	lsls	r3, r3, #13
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d204      	bcs.n	8002b7c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	e0e9      	b.n	8002d50 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8002b7c:	231a      	movs	r3, #26
 8002b7e:	2220      	movs	r2, #32
 8002b80:	189b      	adds	r3, r3, r2
 8002b82:	19db      	adds	r3, r3, r7
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e0e2      	b.n	8002d50 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d000      	beq.n	8002b98 <UART_SetConfig+0x300>
 8002b96:	e083      	b.n	8002ca0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8002b98:	231b      	movs	r3, #27
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	19db      	adds	r3, r3, r7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d015      	beq.n	8002bd2 <UART_SetConfig+0x33a>
 8002ba6:	dc2b      	bgt.n	8002c00 <UART_SetConfig+0x368>
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d00d      	beq.n	8002bc8 <UART_SetConfig+0x330>
 8002bac:	dc28      	bgt.n	8002c00 <UART_SetConfig+0x368>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <UART_SetConfig+0x320>
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d005      	beq.n	8002bc2 <UART_SetConfig+0x32a>
 8002bb6:	e023      	b.n	8002c00 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb8:	f7ff f98c 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc0:	e027      	b.n	8002c12 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <UART_SetConfig+0x360>)
 8002bc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bc6:	e024      	b.n	8002c12 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc8:	f7ff f8f8 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bd0:	e01f      	b.n	8002c12 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bd2:	2380      	movs	r3, #128	; 0x80
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002bd8:	e01b      	b.n	8002c12 <UART_SetConfig+0x37a>
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	cfff69f3 	.word	0xcfff69f3
 8002be0:	ffffcfff 	.word	0xffffcfff
 8002be4:	40008000 	.word	0x40008000
 8002be8:	11fff4ff 	.word	0x11fff4ff
 8002bec:	40013800 	.word	0x40013800
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40004400 	.word	0x40004400
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	080042e4 	.word	0x080042e4
      default:
        pclk = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2220      	movs	r2, #32
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        break;
 8002c10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d100      	bne.n	8002c1a <UART_SetConfig+0x382>
 8002c18:	e09a      	b.n	8002d50 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c1e:	4b58      	ldr	r3, [pc, #352]	; (8002d80 <UART_SetConfig+0x4e8>)
 8002c20:	0052      	lsls	r2, r2, #1
 8002c22:	5ad3      	ldrh	r3, [r2, r3]
 8002c24:	0019      	movs	r1, r3
 8002c26:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c28:	f7fd fa6c 	bl	8000104 <__udivsi3>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	005a      	lsls	r2, r3, #1
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	18d2      	adds	r2, r2, r3
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	0010      	movs	r0, r2
 8002c40:	f7fd fa60 	bl	8000104 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d921      	bls.n	8002c92 <UART_SetConfig+0x3fa>
 8002c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	025b      	lsls	r3, r3, #9
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d21c      	bcs.n	8002c92 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	200e      	movs	r0, #14
 8002c5e:	2420      	movs	r4, #32
 8002c60:	1903      	adds	r3, r0, r4
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	210f      	movs	r1, #15
 8002c66:	438a      	bics	r2, r1
 8002c68:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	085b      	lsrs	r3, r3, #1
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2207      	movs	r2, #7
 8002c72:	4013      	ands	r3, r2
 8002c74:	b299      	uxth	r1, r3
 8002c76:	1903      	adds	r3, r0, r4
 8002c78:	19db      	adds	r3, r3, r7
 8002c7a:	1902      	adds	r2, r0, r4
 8002c7c:	19d2      	adds	r2, r2, r7
 8002c7e:	8812      	ldrh	r2, [r2, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1902      	adds	r2, r0, r4
 8002c8a:	19d2      	adds	r2, r2, r7
 8002c8c:	8812      	ldrh	r2, [r2, #0]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	e05e      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002c92:	231a      	movs	r3, #26
 8002c94:	2220      	movs	r2, #32
 8002c96:	189b      	adds	r3, r3, r2
 8002c98:	19db      	adds	r3, r3, r7
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e057      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ca0:	231b      	movs	r3, #27
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	189b      	adds	r3, r3, r2
 8002ca6:	19db      	adds	r3, r3, r7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d015      	beq.n	8002cda <UART_SetConfig+0x442>
 8002cae:	dc18      	bgt.n	8002ce2 <UART_SetConfig+0x44a>
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d00d      	beq.n	8002cd0 <UART_SetConfig+0x438>
 8002cb4:	dc15      	bgt.n	8002ce2 <UART_SetConfig+0x44a>
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <UART_SetConfig+0x428>
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d005      	beq.n	8002cca <UART_SetConfig+0x432>
 8002cbe:	e010      	b.n	8002ce2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f7ff f908 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cc8:	e014      	b.n	8002cf4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <UART_SetConfig+0x4ec>)
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cce:	e011      	b.n	8002cf4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cd0:	f7ff f874 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cd8:	e00c      	b.n	8002cf4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	021b      	lsls	r3, r3, #8
 8002cde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ce0:	e008      	b.n	8002cf4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002ce6:	231a      	movs	r3, #26
 8002ce8:	2220      	movs	r2, #32
 8002cea:	189b      	adds	r3, r3, r2
 8002cec:	19db      	adds	r3, r3, r7
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]
        break;
 8002cf2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02a      	beq.n	8002d50 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cfe:	4b20      	ldr	r3, [pc, #128]	; (8002d80 <UART_SetConfig+0x4e8>)
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	5ad3      	ldrh	r3, [r2, r3]
 8002d04:	0019      	movs	r1, r3
 8002d06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d08:	f7fd f9fc 	bl	8000104 <__udivsi3>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	001a      	movs	r2, r3
 8002d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	18d2      	adds	r2, r2, r3
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	0010      	movs	r0, r2
 8002d20:	f7fd f9f0 	bl	8000104 <__udivsi3>
 8002d24:	0003      	movs	r3, r0
 8002d26:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2a:	2b0f      	cmp	r3, #15
 8002d2c:	d90a      	bls.n	8002d44 <UART_SetConfig+0x4ac>
 8002d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d205      	bcs.n	8002d44 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60da      	str	r2, [r3, #12]
 8002d42:	e005      	b.n	8002d50 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d44:	231a      	movs	r3, #26
 8002d46:	2220      	movs	r2, #32
 8002d48:	189b      	adds	r3, r3, r2
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	226a      	movs	r2, #106	; 0x6a
 8002d54:	2101      	movs	r1, #1
 8002d56:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	2268      	movs	r2, #104	; 0x68
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	2200      	movs	r2, #0
 8002d64:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	2200      	movs	r2, #0
 8002d6a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002d6c:	231a      	movs	r3, #26
 8002d6e:	2220      	movs	r2, #32
 8002d70:	189b      	adds	r3, r3, r2
 8002d72:	19db      	adds	r3, r3, r7
 8002d74:	781b      	ldrb	r3, [r3, #0]
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b010      	add	sp, #64	; 0x40
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	080042e4 	.word	0x080042e4
 8002d84:	00f42400 	.word	0x00f42400

08002d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	2201      	movs	r2, #1
 8002d96:	4013      	ands	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	4a4a      	ldr	r2, [pc, #296]	; (8002ecc <UART_AdvFeatureConfig+0x144>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	0019      	movs	r1, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d00b      	beq.n	8002dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a43      	ldr	r2, [pc, #268]	; (8002ed0 <UART_AdvFeatureConfig+0x148>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2204      	movs	r2, #4
 8002dda:	4013      	ands	r3, r2
 8002ddc:	d00b      	beq.n	8002df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a3b      	ldr	r2, [pc, #236]	; (8002ed4 <UART_AdvFeatureConfig+0x14c>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	2208      	movs	r2, #8
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a34      	ldr	r2, [pc, #208]	; (8002ed8 <UART_AdvFeatureConfig+0x150>)
 8002e08:	4013      	ands	r3, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	2210      	movs	r2, #16
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00b      	beq.n	8002e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <UART_AdvFeatureConfig+0x154>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	430a      	orrs	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3e:	2220      	movs	r2, #32
 8002e40:	4013      	ands	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4a25      	ldr	r2, [pc, #148]	; (8002ee0 <UART_AdvFeatureConfig+0x158>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	0019      	movs	r1, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	4013      	ands	r3, r2
 8002e64:	d01d      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <UART_AdvFeatureConfig+0x15c>)
 8002e6e:	4013      	ands	r3, r2
 8002e70:	0019      	movs	r1, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e82:	2380      	movs	r3, #128	; 0x80
 8002e84:	035b      	lsls	r3, r3, #13
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d10b      	bne.n	8002ea2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <UART_AdvFeatureConfig+0x160>)
 8002e92:	4013      	ands	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00b      	beq.n	8002ec4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	; (8002eec <UART_AdvFeatureConfig+0x164>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]
  }
}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b002      	add	sp, #8
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	fffdffff 	.word	0xfffdffff
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	fffbffff 	.word	0xfffbffff
 8002ed8:	ffff7fff 	.word	0xffff7fff
 8002edc:	ffffefff 	.word	0xffffefff
 8002ee0:	ffffdfff 	.word	0xffffdfff
 8002ee4:	ffefffff 	.word	0xffefffff
 8002ee8:	ff9fffff 	.word	0xff9fffff
 8002eec:	fff7ffff 	.word	0xfff7ffff

08002ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2290      	movs	r2, #144	; 0x90
 8002efc:	2100      	movs	r1, #0
 8002efe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f00:	f7fd fe2c 	bl	8000b5c <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2208      	movs	r2, #8
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b08      	cmp	r3, #8
 8002f14:	d10c      	bne.n	8002f30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2280      	movs	r2, #128	; 0x80
 8002f1a:	0391      	lsls	r1, r2, #14
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <UART_CheckIdleState+0x98>)
 8002f20:	9200      	str	r2, [sp, #0]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f000 f832 	bl	8002f8c <UART_WaitOnFlagUntilTimeout>
 8002f28:	1e03      	subs	r3, r0, #0
 8002f2a:	d001      	beq.n	8002f30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e026      	b.n	8002f7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2204      	movs	r2, #4
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d10c      	bne.n	8002f58 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	03d1      	lsls	r1, r2, #15
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4a10      	ldr	r2, [pc, #64]	; (8002f88 <UART_CheckIdleState+0x98>)
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f000 f81e 	bl	8002f8c <UART_WaitOnFlagUntilTimeout>
 8002f50:	1e03      	subs	r3, r0, #0
 8002f52:	d001      	beq.n	8002f58 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e012      	b.n	8002f7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2288      	movs	r2, #136	; 0x88
 8002f5c:	2120      	movs	r1, #32
 8002f5e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	228c      	movs	r2, #140	; 0x8c
 8002f64:	2120      	movs	r1, #32
 8002f66:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2284      	movs	r2, #132	; 0x84
 8002f78:	2100      	movs	r1, #0
 8002f7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	0018      	movs	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b004      	add	sp, #16
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	01ffffff 	.word	0x01ffffff

08002f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b094      	sub	sp, #80	; 0x50
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	1dfb      	adds	r3, r7, #7
 8002f9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9c:	e0a7      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	d100      	bne.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002fa4:	e0a3      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fd fdd9 	bl	8000b5c <HAL_GetTick>
 8002faa:	0002      	movs	r2, r0
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13f      	bne.n	800303c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	f383 8810 	msr	PRIMASK, r3
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	494e      	ldr	r1, [pc, #312]	; (8003118 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002fde:	400a      	ands	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	f383 8810 	msr	PRIMASK, r3
}
 8002fec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ff6:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	f383 8810 	msr	PRIMASK, r3
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2101      	movs	r1, #1
 8003010:	438a      	bics	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301a:	f383 8810 	msr	PRIMASK, r3
}
 800301e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2288      	movs	r2, #136	; 0x88
 8003024:	2120      	movs	r1, #32
 8003026:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	228c      	movs	r2, #140	; 0x8c
 800302c:	2120      	movs	r1, #32
 800302e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2284      	movs	r2, #132	; 0x84
 8003034:	2100      	movs	r1, #0
 8003036:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e069      	b.n	8003110 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2204      	movs	r2, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d052      	beq.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69da      	ldr	r2, [r3, #28]
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	401a      	ands	r2, r3
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	429a      	cmp	r2, r3
 800305a:	d148      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	0112      	lsls	r2, r2, #4
 8003064:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	613b      	str	r3, [r7, #16]
  return(result);
 800306c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	2301      	movs	r3, #1
 8003072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4924      	ldr	r1, [pc, #144]	; (8003118 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800308e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	61fb      	str	r3, [r7, #28]
  return(result);
 800309e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80030a2:	2301      	movs	r3, #1
 80030a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	438a      	bics	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2288      	movs	r2, #136	; 0x88
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	228c      	movs	r2, #140	; 0x8c
 80030d6:	2120      	movs	r1, #32
 80030d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2290      	movs	r2, #144	; 0x90
 80030de:	2120      	movs	r1, #32
 80030e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2284      	movs	r2, #132	; 0x84
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e010      	b.n	8003110 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4013      	ands	r3, r2
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	425a      	negs	r2, r3
 80030fe:	4153      	adcs	r3, r2
 8003100:	b2db      	uxtb	r3, r3
 8003102:	001a      	movs	r2, r3
 8003104:	1dfb      	adds	r3, r7, #7
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d100      	bne.n	800310e <UART_WaitOnFlagUntilTimeout+0x182>
 800310c:	e747      	b.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	0018      	movs	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	b014      	add	sp, #80	; 0x50
 8003116:	bd80      	pop	{r7, pc}
 8003118:	fffffe5f 	.word	0xfffffe5f

0800311c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b098      	sub	sp, #96	; 0x60
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	1dbb      	adds	r3, r7, #6
 8003128:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1dba      	adds	r2, r7, #6
 8003134:	215c      	movs	r1, #92	; 0x5c
 8003136:	8812      	ldrh	r2, [r2, #0]
 8003138:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1dba      	adds	r2, r7, #6
 800313e:	215e      	movs	r1, #94	; 0x5e
 8003140:	8812      	ldrh	r2, [r2, #0]
 8003142:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	015b      	lsls	r3, r3, #5
 8003152:	429a      	cmp	r2, r3
 8003154:	d10d      	bne.n	8003172 <UART_Start_Receive_IT+0x56>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d104      	bne.n	8003168 <UART_Start_Receive_IT+0x4c>
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2260      	movs	r2, #96	; 0x60
 8003162:	497b      	ldr	r1, [pc, #492]	; (8003350 <UART_Start_Receive_IT+0x234>)
 8003164:	5299      	strh	r1, [r3, r2]
 8003166:	e02e      	b.n	80031c6 <UART_Start_Receive_IT+0xaa>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2260      	movs	r2, #96	; 0x60
 800316c:	21ff      	movs	r1, #255	; 0xff
 800316e:	5299      	strh	r1, [r3, r2]
 8003170:	e029      	b.n	80031c6 <UART_Start_Receive_IT+0xaa>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10d      	bne.n	8003196 <UART_Start_Receive_IT+0x7a>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <UART_Start_Receive_IT+0x70>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2260      	movs	r2, #96	; 0x60
 8003186:	21ff      	movs	r1, #255	; 0xff
 8003188:	5299      	strh	r1, [r3, r2]
 800318a:	e01c      	b.n	80031c6 <UART_Start_Receive_IT+0xaa>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2260      	movs	r2, #96	; 0x60
 8003190:	217f      	movs	r1, #127	; 0x7f
 8003192:	5299      	strh	r1, [r3, r2]
 8003194:	e017      	b.n	80031c6 <UART_Start_Receive_IT+0xaa>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	689a      	ldr	r2, [r3, #8]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	055b      	lsls	r3, r3, #21
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10d      	bne.n	80031be <UART_Start_Receive_IT+0xa2>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <UART_Start_Receive_IT+0x98>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2260      	movs	r2, #96	; 0x60
 80031ae:	217f      	movs	r1, #127	; 0x7f
 80031b0:	5299      	strh	r1, [r3, r2]
 80031b2:	e008      	b.n	80031c6 <UART_Start_Receive_IT+0xaa>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2260      	movs	r2, #96	; 0x60
 80031b8:	213f      	movs	r1, #63	; 0x3f
 80031ba:	5299      	strh	r1, [r3, r2]
 80031bc:	e003      	b.n	80031c6 <UART_Start_Receive_IT+0xaa>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2260      	movs	r2, #96	; 0x60
 80031c2:	2100      	movs	r1, #0
 80031c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2290      	movs	r2, #144	; 0x90
 80031ca:	2100      	movs	r1, #0
 80031cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	228c      	movs	r2, #140	; 0x8c
 80031d2:	2122      	movs	r1, #34	; 0x22
 80031d4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031d6:	f3ef 8310 	mrs	r3, PRIMASK
 80031da:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80031dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031e0:	2301      	movs	r3, #1
 80031e2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e6:	f383 8810 	msr	PRIMASK, r3
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2101      	movs	r1, #1
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
 80031fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031fe:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003202:	f383 8810 	msr	PRIMASK, r3
}
 8003206:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	059b      	lsls	r3, r3, #22
 8003210:	429a      	cmp	r2, r3
 8003212:	d150      	bne.n	80032b6 <UART_Start_Receive_IT+0x19a>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2268      	movs	r2, #104	; 0x68
 8003218:	5a9b      	ldrh	r3, [r3, r2]
 800321a:	1dba      	adds	r2, r7, #6
 800321c:	8812      	ldrh	r2, [r2, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d349      	bcc.n	80032b6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	015b      	lsls	r3, r3, #5
 800322a:	429a      	cmp	r2, r3
 800322c:	d107      	bne.n	800323e <UART_Start_Receive_IT+0x122>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a46      	ldr	r2, [pc, #280]	; (8003354 <UART_Start_Receive_IT+0x238>)
 800323a:	675a      	str	r2, [r3, #116]	; 0x74
 800323c:	e002      	b.n	8003244 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a45      	ldr	r2, [pc, #276]	; (8003358 <UART_Start_Receive_IT+0x23c>)
 8003242:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d019      	beq.n	8003280 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800324c:	f3ef 8310 	mrs	r3, PRIMASK
 8003250:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003254:	65bb      	str	r3, [r7, #88]	; 0x58
 8003256:	2301      	movs	r3, #1
 8003258:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	f383 8810 	msr	PRIMASK, r3
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	0049      	lsls	r1, r1, #1
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003276:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800327a:	f383 8810 	msr	PRIMASK, r3
}
 800327e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003280:	f3ef 8310 	mrs	r3, PRIMASK
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
 800328a:	2301      	movs	r3, #1
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	f383 8810 	msr	PRIMASK, r3
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	0549      	lsls	r1, r1, #21
 80032a4:	430a      	orrs	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	f383 8810 	msr	PRIMASK, r3
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	e047      	b.n	8003346 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	015b      	lsls	r3, r3, #5
 80032be:	429a      	cmp	r2, r3
 80032c0:	d107      	bne.n	80032d2 <UART_Start_Receive_IT+0x1b6>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d103      	bne.n	80032d2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a23      	ldr	r2, [pc, #140]	; (800335c <UART_Start_Receive_IT+0x240>)
 80032ce:	675a      	str	r2, [r3, #116]	; 0x74
 80032d0:	e002      	b.n	80032d8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a22      	ldr	r2, [pc, #136]	; (8003360 <UART_Start_Receive_IT+0x244>)
 80032d6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d019      	beq.n	8003314 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e0:	f3ef 8310 	mrs	r3, PRIMASK
 80032e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80032e6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80032e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ea:	2301      	movs	r3, #1
 80032ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2190      	movs	r1, #144	; 0x90
 8003302:	0049      	lsls	r1, r1, #1
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	e018      	b.n	8003346 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	613b      	str	r3, [r7, #16]
  return(result);
 800331a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800331c:	653b      	str	r3, [r7, #80]	; 0x50
 800331e:	2301      	movs	r3, #1
 8003320:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2120      	movs	r1, #32
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b018      	add	sp, #96	; 0x60
 800334e:	bd80      	pop	{r7, pc}
 8003350:	000001ff 	.word	0x000001ff
 8003354:	08003df5 	.word	0x08003df5
 8003358:	08003b01 	.word	0x08003b01
 800335c:	08003989 	.word	0x08003989
 8003360:	08003811 	.word	0x08003811

08003364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	; 0x38
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800336c:	f3ef 8310 	mrs	r3, PRIMASK
 8003370:	617b      	str	r3, [r7, #20]
  return(result);
 8003372:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	f383 8810 	msr	PRIMASK, r3
}
 8003380:	46c0      	nop			; (mov r8, r8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4926      	ldr	r1, [pc, #152]	; (8003428 <UART_EndRxTransfer+0xc4>)
 800338e:	400a      	ands	r2, r1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003394:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f383 8810 	msr	PRIMASK, r3
}
 800339c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800339e:	f3ef 8310 	mrs	r3, PRIMASK
 80033a2:	623b      	str	r3, [r7, #32]
  return(result);
 80033a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
 80033a8:	2301      	movs	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	f383 8810 	msr	PRIMASK, r3
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	491b      	ldr	r1, [pc, #108]	; (800342c <UART_EndRxTransfer+0xc8>)
 80033c0:	400a      	ands	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	f383 8810 	msr	PRIMASK, r3
}
 80033ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d118      	bne.n	800340a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d8:	f3ef 8310 	mrs	r3, PRIMASK
 80033dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033e2:	2301      	movs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f383 8810 	msr	PRIMASK, r3
}
 80033ec:	46c0      	nop			; (mov r8, r8)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2110      	movs	r1, #16
 80033fa:	438a      	bics	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003400:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	f383 8810 	msr	PRIMASK, r3
}
 8003408:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	228c      	movs	r2, #140	; 0x8c
 800340e:	2120      	movs	r1, #32
 8003410:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b00e      	add	sp, #56	; 0x38
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			; (mov r8, r8)
 8003428:	fffffedf 	.word	0xfffffedf
 800342c:	effffffe 	.word	0xeffffffe

08003430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	225e      	movs	r2, #94	; 0x5e
 8003442:	2100      	movs	r1, #0
 8003444:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2256      	movs	r2, #86	; 0x56
 800344a:	2100      	movs	r1, #0
 800344c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	22a4      	movs	r2, #164	; 0xa4
 8003452:	589b      	ldr	r3, [r3, r2]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	0010      	movs	r0, r2
 8003458:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b004      	add	sp, #16
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b08a      	sub	sp, #40	; 0x28
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2288      	movs	r2, #136	; 0x88
 800346e:	589b      	ldr	r3, [r3, r2]
 8003470:	2b21      	cmp	r3, #33	; 0x21
 8003472:	d14c      	bne.n	800350e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2256      	movs	r2, #86	; 0x56
 8003478:	5a9b      	ldrh	r3, [r3, r2]
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d132      	bne.n	80034e6 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	60bb      	str	r3, [r7, #8]
  return(result);
 8003486:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
 800348a:	2301      	movs	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	438a      	bics	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	617b      	str	r3, [r7, #20]
  return(result);
 80034b8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034ba:	623b      	str	r3, [r7, #32]
 80034bc:	2301      	movs	r3, #1
 80034be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80034e4:	e013      	b.n	800350e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f6:	1c5a      	adds	r2, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2256      	movs	r2, #86	; 0x56
 8003500:	5a9b      	ldrh	r3, [r3, r2]
 8003502:	b29b      	uxth	r3, r3
 8003504:	3b01      	subs	r3, #1
 8003506:	b299      	uxth	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2256      	movs	r2, #86	; 0x56
 800350c:	5299      	strh	r1, [r3, r2]
}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	46bd      	mov	sp, r7
 8003512:	b00a      	add	sp, #40	; 0x28
 8003514:	bd80      	pop	{r7, pc}

08003516 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b08c      	sub	sp, #48	; 0x30
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2288      	movs	r2, #136	; 0x88
 8003522:	589b      	ldr	r3, [r3, r2]
 8003524:	2b21      	cmp	r3, #33	; 0x21
 8003526:	d151      	bne.n	80035cc <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2256      	movs	r2, #86	; 0x56
 800352c:	5a9b      	ldrh	r3, [r3, r2]
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d132      	bne.n	800359a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003534:	f3ef 8310 	mrs	r3, PRIMASK
 8003538:	60fb      	str	r3, [r7, #12]
  return(result);
 800353a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800353c:	62bb      	str	r3, [r7, #40]	; 0x28
 800353e:	2301      	movs	r3, #1
 8003540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f383 8810 	msr	PRIMASK, r3
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	438a      	bics	r2, r1
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003566:	f3ef 8310 	mrs	r3, PRIMASK
 800356a:	61bb      	str	r3, [r7, #24]
  return(result);
 800356c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	2301      	movs	r3, #1
 8003572:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	430a      	orrs	r2, r1
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	f383 8810 	msr	PRIMASK, r3
}
 8003596:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003598:	e018      	b.n	80035cc <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	001a      	movs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	05d2      	lsls	r2, r2, #23
 80035ac:	0dd2      	lsrs	r2, r2, #23
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2256      	movs	r2, #86	; 0x56
 80035be:	5a9b      	ldrh	r3, [r3, r2]
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b299      	uxth	r1, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2256      	movs	r2, #86	; 0x56
 80035ca:	5299      	strh	r1, [r3, r2]
}
 80035cc:	46c0      	nop			; (mov r8, r8)
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b00c      	add	sp, #48	; 0x30
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08c      	sub	sp, #48	; 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2288      	movs	r2, #136	; 0x88
 80035e0:	589b      	ldr	r3, [r3, r2]
 80035e2:	2b21      	cmp	r3, #33	; 0x21
 80035e4:	d165      	bne.n	80036b2 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80035e6:	232e      	movs	r3, #46	; 0x2e
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	216a      	movs	r1, #106	; 0x6a
 80035ee:	5a52      	ldrh	r2, [r2, r1]
 80035f0:	801a      	strh	r2, [r3, #0]
 80035f2:	e059      	b.n	80036a8 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2256      	movs	r2, #86	; 0x56
 80035f8:	5a9b      	ldrh	r3, [r3, r2]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d133      	bne.n	8003668 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003600:	f3ef 8310 	mrs	r3, PRIMASK
 8003604:	60fb      	str	r3, [r7, #12]
  return(result);
 8003606:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
 800360a:	2301      	movs	r3, #1
 800360c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	f383 8810 	msr	PRIMASK, r3
}
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4926      	ldr	r1, [pc, #152]	; (80036bc <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8003622:	400a      	ands	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f383 8810 	msr	PRIMASK, r3
}
 8003630:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003632:	f3ef 8310 	mrs	r3, PRIMASK
 8003636:	61bb      	str	r3, [r7, #24]
  return(result);
 8003638:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
 800363c:	2301      	movs	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f383 8810 	msr	PRIMASK, r3
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2140      	movs	r1, #64	; 0x40
 8003654:	430a      	orrs	r2, r1
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f383 8810 	msr	PRIMASK, r3
}
 8003662:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003664:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003666:	e024      	b.n	80036b2 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	4013      	ands	r3, r2
 8003672:	d013      	beq.n	800369c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	1c5a      	adds	r2, r3, #1
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2256      	movs	r2, #86	; 0x56
 800368e:	5a9b      	ldrh	r3, [r3, r2]
 8003690:	b29b      	uxth	r3, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	b299      	uxth	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2256      	movs	r2, #86	; 0x56
 800369a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800369c:	212e      	movs	r1, #46	; 0x2e
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	187b      	adds	r3, r7, r1
 80036a4:	3a01      	subs	r2, #1
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	232e      	movs	r3, #46	; 0x2e
 80036aa:	18fb      	adds	r3, r7, r3
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1a0      	bne.n	80035f4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b00c      	add	sp, #48	; 0x30
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	ff7fffff 	.word	0xff7fffff

080036c0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2288      	movs	r2, #136	; 0x88
 80036cc:	589b      	ldr	r3, [r3, r2]
 80036ce:	2b21      	cmp	r3, #33	; 0x21
 80036d0:	d16a      	bne.n	80037a8 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80036d2:	232e      	movs	r3, #46	; 0x2e
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	216a      	movs	r1, #106	; 0x6a
 80036da:	5a52      	ldrh	r2, [r2, r1]
 80036dc:	801a      	strh	r2, [r3, #0]
 80036de:	e05e      	b.n	800379e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2256      	movs	r2, #86	; 0x56
 80036e4:	5a9b      	ldrh	r3, [r3, r2]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d133      	bne.n	8003754 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ec:	f3ef 8310 	mrs	r3, PRIMASK
 80036f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80036f2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
 80036f6:	2301      	movs	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4928      	ldr	r1, [pc, #160]	; (80037b0 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800370e:	400a      	ands	r2, r1
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371e:	f3ef 8310 	mrs	r3, PRIMASK
 8003722:	617b      	str	r3, [r7, #20]
  return(result);
 8003724:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003726:	623b      	str	r3, [r7, #32]
 8003728:	2301      	movs	r3, #1
 800372a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	f383 8810 	msr	PRIMASK, r3
}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2140      	movs	r1, #64	; 0x40
 8003740:	430a      	orrs	r2, r1
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f383 8810 	msr	PRIMASK, r3
}
 800374e:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8003750:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003752:	e029      	b.n	80037a8 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	4013      	ands	r3, r2
 800375e:	d018      	beq.n	8003792 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003764:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	001a      	movs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	05d2      	lsls	r2, r2, #23
 8003772:	0dd2      	lsrs	r2, r2, #23
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	1c9a      	adds	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2256      	movs	r2, #86	; 0x56
 8003784:	5a9b      	ldrh	r3, [r3, r2]
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b299      	uxth	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2256      	movs	r2, #86	; 0x56
 8003790:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003792:	212e      	movs	r1, #46	; 0x2e
 8003794:	187b      	adds	r3, r7, r1
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	187b      	adds	r3, r7, r1
 800379a:	3a01      	subs	r2, #1
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	232e      	movs	r3, #46	; 0x2e
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d19b      	bne.n	80036e0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b00c      	add	sp, #48	; 0x30
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	ff7fffff 	.word	0xff7fffff

080037b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8310 	mrs	r3, PRIMASK
 80037c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80037c2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	2301      	movs	r3, #1
 80037c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f383 8810 	msr	PRIMASK, r3
}
 80037d0:	46c0      	nop			; (mov r8, r8)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2140      	movs	r1, #64	; 0x40
 80037de:	438a      	bics	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f383 8810 	msr	PRIMASK, r3
}
 80037ec:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2288      	movs	r2, #136	; 0x88
 80037f2:	2120      	movs	r1, #32
 80037f4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2298      	movs	r2, #152	; 0x98
 8003800:	589b      	ldr	r3, [r3, r2]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	0010      	movs	r0, r2
 8003806:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b006      	add	sp, #24
 800380e:	bd80      	pop	{r7, pc}

08003810 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b090      	sub	sp, #64	; 0x40
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003818:	203e      	movs	r0, #62	; 0x3e
 800381a:	183b      	adds	r3, r7, r0
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	2160      	movs	r1, #96	; 0x60
 8003820:	5a52      	ldrh	r2, [r2, r1]
 8003822:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	228c      	movs	r2, #140	; 0x8c
 8003828:	589b      	ldr	r3, [r3, r2]
 800382a:	2b22      	cmp	r3, #34	; 0x22
 800382c:	d000      	beq.n	8003830 <UART_RxISR_8BIT+0x20>
 800382e:	e09d      	b.n	800396c <UART_RxISR_8BIT+0x15c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003836:	213c      	movs	r1, #60	; 0x3c
 8003838:	187b      	adds	r3, r7, r1
 800383a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800383c:	187b      	adds	r3, r7, r1
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	b2da      	uxtb	r2, r3
 8003842:	183b      	adds	r3, r7, r0
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b2d9      	uxtb	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	400a      	ands	r2, r1
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	225e      	movs	r2, #94	; 0x5e
 8003860:	5a9b      	ldrh	r3, [r3, r2]
 8003862:	b29b      	uxth	r3, r3
 8003864:	3b01      	subs	r3, #1
 8003866:	b299      	uxth	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	225e      	movs	r2, #94	; 0x5e
 800386c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	225e      	movs	r2, #94	; 0x5e
 8003872:	5a9b      	ldrh	r3, [r3, r2]
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d000      	beq.n	800387c <UART_RxISR_8BIT+0x6c>
 800387a:	e07f      	b.n	800397c <UART_RxISR_8BIT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800387c:	f3ef 8310 	mrs	r3, PRIMASK
 8003880:	61bb      	str	r3, [r7, #24]
  return(result);
 8003882:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003884:	63bb      	str	r3, [r7, #56]	; 0x38
 8003886:	2301      	movs	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f383 8810 	msr	PRIMASK, r3
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4939      	ldr	r1, [pc, #228]	; (8003984 <UART_RxISR_8BIT+0x174>)
 800389e:	400a      	ands	r2, r1
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f383 8810 	msr	PRIMASK, r3
}
 80038ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b6:	637b      	str	r3, [r7, #52]	; 0x34
 80038b8:	2301      	movs	r3, #1
 80038ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038be:	f383 8810 	msr	PRIMASK, r3
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2101      	movs	r1, #1
 80038d0:	438a      	bics	r2, r1
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	228c      	movs	r2, #140	; 0x8c
 80038e4:	2120      	movs	r1, #32
 80038e6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d130      	bne.n	800395e <UART_RxISR_8BIT+0x14e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003902:	f3ef 8310 	mrs	r3, PRIMASK
 8003906:	60fb      	str	r3, [r7, #12]
  return(result);
 8003908:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390a:	633b      	str	r3, [r7, #48]	; 0x30
 800390c:	2301      	movs	r3, #1
 800390e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f383 8810 	msr	PRIMASK, r3
}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2110      	movs	r1, #16
 8003924:	438a      	bics	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f383 8810 	msr	PRIMASK, r3
}
 8003932:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	2210      	movs	r2, #16
 800393c:	4013      	ands	r3, r2
 800393e:	2b10      	cmp	r3, #16
 8003940:	d103      	bne.n	800394a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2210      	movs	r2, #16
 8003948:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	22c0      	movs	r2, #192	; 0xc0
 800394e:	589b      	ldr	r3, [r3, r2]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	215c      	movs	r1, #92	; 0x5c
 8003954:	5a51      	ldrh	r1, [r2, r1]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	0010      	movs	r0, r2
 800395a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800395c:	e00e      	b.n	800397c <UART_RxISR_8BIT+0x16c>
        huart->RxCpltCallback(huart);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	22a0      	movs	r2, #160	; 0xa0
 8003962:	589b      	ldr	r3, [r3, r2]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	0010      	movs	r0, r2
 8003968:	4798      	blx	r3
}
 800396a:	e007      	b.n	800397c <UART_RxISR_8BIT+0x16c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	699a      	ldr	r2, [r3, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2108      	movs	r1, #8
 8003978:	430a      	orrs	r2, r1
 800397a:	619a      	str	r2, [r3, #24]
}
 800397c:	46c0      	nop			; (mov r8, r8)
 800397e:	46bd      	mov	sp, r7
 8003980:	b010      	add	sp, #64	; 0x40
 8003982:	bd80      	pop	{r7, pc}
 8003984:	fffffedf 	.word	0xfffffedf

08003988 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b090      	sub	sp, #64	; 0x40
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003990:	203e      	movs	r0, #62	; 0x3e
 8003992:	183b      	adds	r3, r7, r0
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	2160      	movs	r1, #96	; 0x60
 8003998:	5a52      	ldrh	r2, [r2, r1]
 800399a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	228c      	movs	r2, #140	; 0x8c
 80039a0:	589b      	ldr	r3, [r3, r2]
 80039a2:	2b22      	cmp	r3, #34	; 0x22
 80039a4:	d000      	beq.n	80039a8 <UART_RxISR_16BIT+0x20>
 80039a6:	e09d      	b.n	8003ae4 <UART_RxISR_16BIT+0x15c>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ae:	213c      	movs	r1, #60	; 0x3c
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	183a      	adds	r2, r7, r0
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	8812      	ldrh	r2, [r2, #0]
 80039c2:	4013      	ands	r3, r2
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ce:	1c9a      	adds	r2, r3, #2
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	225e      	movs	r2, #94	; 0x5e
 80039d8:	5a9b      	ldrh	r3, [r3, r2]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b299      	uxth	r1, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	225e      	movs	r2, #94	; 0x5e
 80039e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	225e      	movs	r2, #94	; 0x5e
 80039ea:	5a9b      	ldrh	r3, [r3, r2]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d000      	beq.n	80039f4 <UART_RxISR_16BIT+0x6c>
 80039f2:	e07f      	b.n	8003af4 <UART_RxISR_16BIT+0x16c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039f4:	f3ef 8310 	mrs	r3, PRIMASK
 80039f8:	617b      	str	r3, [r7, #20]
  return(result);
 80039fa:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4939      	ldr	r1, [pc, #228]	; (8003afc <UART_RxISR_16BIT+0x174>)
 8003a16:	400a      	ands	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a26:	f3ef 8310 	mrs	r3, PRIMASK
 8003a2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003a2c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003a30:	2301      	movs	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	f383 8810 	msr	PRIMASK, r3
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2101      	movs	r1, #1
 8003a48:	438a      	bics	r2, r1
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a52:	f383 8810 	msr	PRIMASK, r3
}
 8003a56:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	228c      	movs	r2, #140	; 0x8c
 8003a5c:	2120      	movs	r1, #32
 8003a5e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d130      	bne.n	8003ad6 <UART_RxISR_16BIT+0x14e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a80:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a84:	2301      	movs	r3, #1
 8003a86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f383 8810 	msr	PRIMASK, r3
}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2110      	movs	r1, #16
 8003a9c:	438a      	bics	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b10      	cmp	r3, #16
 8003ab8:	d103      	bne.n	8003ac2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2210      	movs	r2, #16
 8003ac0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	22c0      	movs	r2, #192	; 0xc0
 8003ac6:	589b      	ldr	r3, [r3, r2]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	215c      	movs	r1, #92	; 0x5c
 8003acc:	5a51      	ldrh	r1, [r2, r1]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	0010      	movs	r0, r2
 8003ad2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ad4:	e00e      	b.n	8003af4 <UART_RxISR_16BIT+0x16c>
        huart->RxCpltCallback(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	22a0      	movs	r2, #160	; 0xa0
 8003ada:	589b      	ldr	r3, [r3, r2]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	0010      	movs	r0, r2
 8003ae0:	4798      	blx	r3
}
 8003ae2:	e007      	b.n	8003af4 <UART_RxISR_16BIT+0x16c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2108      	movs	r1, #8
 8003af0:	430a      	orrs	r2, r1
 8003af2:	619a      	str	r2, [r3, #24]
}
 8003af4:	46c0      	nop			; (mov r8, r8)
 8003af6:	46bd      	mov	sp, r7
 8003af8:	b010      	add	sp, #64	; 0x40
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	fffffedf 	.word	0xfffffedf

08003b00 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b09c      	sub	sp, #112	; 0x70
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003b08:	236a      	movs	r3, #106	; 0x6a
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	2160      	movs	r1, #96	; 0x60
 8003b10:	5a52      	ldrh	r2, [r2, r1]
 8003b12:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	228c      	movs	r2, #140	; 0x8c
 8003b30:	589b      	ldr	r3, [r3, r2]
 8003b32:	2b22      	cmp	r3, #34	; 0x22
 8003b34:	d000      	beq.n	8003b38 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003b36:	e149      	b.n	8003dcc <UART_RxISR_8BIT_FIFOEN+0x2cc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003b38:	235e      	movs	r3, #94	; 0x5e
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	2168      	movs	r1, #104	; 0x68
 8003b40:	5a52      	ldrh	r2, [r2, r1]
 8003b42:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b44:	e0f0      	b.n	8003d28 <UART_RxISR_8BIT_FIFOEN+0x228>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4c:	215c      	movs	r1, #92	; 0x5c
 8003b4e:	187b      	adds	r3, r7, r1
 8003b50:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	236a      	movs	r3, #106	; 0x6a
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b2d9      	uxtb	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b64:	400a      	ands	r2, r1
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	225e      	movs	r2, #94	; 0x5e
 8003b78:	5a9b      	ldrh	r3, [r3, r2]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	225e      	movs	r2, #94	; 0x5e
 8003b84:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003b8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b90:	2207      	movs	r2, #7
 8003b92:	4013      	ands	r3, r2
 8003b94:	d04b      	beq.n	8003c2e <UART_RxISR_8BIT_FIFOEN+0x12e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d010      	beq.n	8003bc0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8003b9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2290      	movs	r2, #144	; 0x90
 8003bb4:	589b      	ldr	r3, [r3, r2]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	431a      	orrs	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2190      	movs	r1, #144	; 0x90
 8003bbe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d00f      	beq.n	8003be8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2290      	movs	r2, #144	; 0x90
 8003bdc:	589b      	ldr	r3, [r3, r2]
 8003bde:	2204      	movs	r2, #4
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2190      	movs	r1, #144	; 0x90
 8003be6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bea:	2204      	movs	r2, #4
 8003bec:	4013      	ands	r3, r2
 8003bee:	d00f      	beq.n	8003c10 <UART_RxISR_8BIT_FIFOEN+0x110>
 8003bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	d00b      	beq.n	8003c10 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2290      	movs	r2, #144	; 0x90
 8003c04:	589b      	ldr	r3, [r3, r2]
 8003c06:	2202      	movs	r2, #2
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2190      	movs	r1, #144	; 0x90
 8003c0e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2290      	movs	r2, #144	; 0x90
 8003c14:	589b      	ldr	r3, [r3, r2]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <UART_RxISR_8BIT_FIFOEN+0x12e>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	22a4      	movs	r2, #164	; 0xa4
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	0010      	movs	r0, r2
 8003c24:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2290      	movs	r2, #144	; 0x90
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	225e      	movs	r2, #94	; 0x5e
 8003c32:	5a9b      	ldrh	r3, [r3, r2]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d176      	bne.n	8003d28 <UART_RxISR_8BIT_FIFOEN+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c44:	2301      	movs	r3, #1
 8003c46:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	f383 8810 	msr	PRIMASK, r3
}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4962      	ldr	r1, [pc, #392]	; (8003de4 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c66:	f383 8810 	msr	PRIMASK, r3
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c74:	657b      	str	r3, [r7, #84]	; 0x54
 8003c76:	2301      	movs	r3, #1
 8003c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c7c:	f383 8810 	msr	PRIMASK, r3
}
 8003c80:	46c0      	nop			; (mov r8, r8)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4956      	ldr	r1, [pc, #344]	; (8003de8 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8003c8e:	400a      	ands	r2, r1
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c98:	f383 8810 	msr	PRIMASK, r3
}
 8003c9c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	228c      	movs	r2, #140	; 0x8c
 8003ca2:	2120      	movs	r1, #32
 8003ca4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d130      	bne.n	8003d1c <UART_RxISR_8BIT_FIFOEN+0x21c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003cc4:	623b      	str	r3, [r7, #32]
  return(result);
 8003cc6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	653b      	str	r3, [r7, #80]	; 0x50
 8003cca:	2301      	movs	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f383 8810 	msr	PRIMASK, r3
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2110      	movs	r1, #16
 8003ce2:	438a      	bics	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	f383 8810 	msr	PRIMASK, r3
}
 8003cf0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b10      	cmp	r3, #16
 8003cfe:	d103      	bne.n	8003d08 <UART_RxISR_8BIT_FIFOEN+0x208>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2210      	movs	r2, #16
 8003d06:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	22c0      	movs	r2, #192	; 0xc0
 8003d0c:	589b      	ldr	r3, [r3, r2]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	215c      	movs	r1, #92	; 0x5c
 8003d12:	5a51      	ldrh	r1, [r2, r1]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	0010      	movs	r0, r2
 8003d18:	4798      	blx	r3
 8003d1a:	e005      	b.n	8003d28 <UART_RxISR_8BIT_FIFOEN+0x228>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	22a0      	movs	r2, #160	; 0xa0
 8003d20:	589b      	ldr	r3, [r3, r2]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	0010      	movs	r0, r2
 8003d26:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003d28:	235e      	movs	r3, #94	; 0x5e
 8003d2a:	18fb      	adds	r3, r7, r3
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <UART_RxISR_8BIT_FIFOEN+0x23c>
 8003d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d34:	2220      	movs	r2, #32
 8003d36:	4013      	ands	r3, r2
 8003d38:	d000      	beq.n	8003d3c <UART_RxISR_8BIT_FIFOEN+0x23c>
 8003d3a:	e704      	b.n	8003b46 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003d3c:	204e      	movs	r0, #78	; 0x4e
 8003d3e:	183b      	adds	r3, r7, r0
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	215e      	movs	r1, #94	; 0x5e
 8003d44:	5a52      	ldrh	r2, [r2, r1]
 8003d46:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003d48:	0001      	movs	r1, r0
 8003d4a:	187b      	adds	r3, r7, r1
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d044      	beq.n	8003ddc <UART_RxISR_8BIT_FIFOEN+0x2dc>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2268      	movs	r2, #104	; 0x68
 8003d56:	5a9b      	ldrh	r3, [r3, r2]
 8003d58:	187a      	adds	r2, r7, r1
 8003d5a:	8812      	ldrh	r2, [r2, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d23d      	bcs.n	8003ddc <UART_RxISR_8BIT_FIFOEN+0x2dc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d60:	f3ef 8310 	mrs	r3, PRIMASK
 8003d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d66:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			; (mov r8, r8)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	491a      	ldr	r1, [pc, #104]	; (8003dec <UART_RxISR_8BIT_FIFOEN+0x2ec>)
 8003d82:	400a      	ands	r2, r1
 8003d84:	609a      	str	r2, [r3, #8]
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	f383 8810 	msr	PRIMASK, r3
}
 8003d90:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8003d96:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d98:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003da0:	647b      	str	r3, [r7, #68]	; 0x44
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2120      	movs	r1, #32
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003dca:	e007      	b.n	8003ddc <UART_RxISR_8BIT_FIFOEN+0x2dc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699a      	ldr	r2, [r3, #24]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	619a      	str	r2, [r3, #24]
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b01c      	add	sp, #112	; 0x70
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	fffffeff 	.word	0xfffffeff
 8003de8:	effffffe 	.word	0xeffffffe
 8003dec:	efffffff 	.word	0xefffffff
 8003df0:	08003811 	.word	0x08003811

08003df4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b09e      	sub	sp, #120	; 0x78
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003dfc:	2372      	movs	r3, #114	; 0x72
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	2160      	movs	r1, #96	; 0x60
 8003e04:	5a52      	ldrh	r2, [r2, r1]
 8003e06:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	228c      	movs	r2, #140	; 0x8c
 8003e24:	589b      	ldr	r3, [r3, r2]
 8003e26:	2b22      	cmp	r3, #34	; 0x22
 8003e28:	d000      	beq.n	8003e2c <UART_RxISR_16BIT_FIFOEN+0x38>
 8003e2a:	e149      	b.n	80040c0 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003e2c:	2366      	movs	r3, #102	; 0x66
 8003e2e:	18fb      	adds	r3, r7, r3
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	2168      	movs	r1, #104	; 0x68
 8003e34:	5a52      	ldrh	r2, [r2, r1]
 8003e36:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003e38:	e0f0      	b.n	800401c <UART_RxISR_16BIT_FIFOEN+0x228>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e40:	2164      	movs	r1, #100	; 0x64
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e4a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2272      	movs	r2, #114	; 0x72
 8003e50:	18ba      	adds	r2, r7, r2
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	8812      	ldrh	r2, [r2, #0]
 8003e56:	4013      	ands	r3, r2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	225e      	movs	r2, #94	; 0x5e
 8003e6c:	5a9b      	ldrh	r3, [r3, r2]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3b01      	subs	r3, #1
 8003e72:	b299      	uxth	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	225e      	movs	r2, #94	; 0x5e
 8003e78:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e84:	2207      	movs	r2, #7
 8003e86:	4013      	ands	r3, r2
 8003e88:	d04b      	beq.n	8003f22 <UART_RxISR_16BIT_FIFOEN+0x12e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d010      	beq.n	8003eb4 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8003e92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2290      	movs	r2, #144	; 0x90
 8003ea8:	589b      	ldr	r3, [r3, r2]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2190      	movs	r1, #144	; 0x90
 8003eb2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d00f      	beq.n	8003edc <UART_RxISR_16BIT_FIFOEN+0xe8>
 8003ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d00b      	beq.n	8003edc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2290      	movs	r2, #144	; 0x90
 8003ed0:	589b      	ldr	r3, [r3, r2]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2190      	movs	r1, #144	; 0x90
 8003eda:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ede:	2204      	movs	r2, #4
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d00f      	beq.n	8003f04 <UART_RxISR_16BIT_FIFOEN+0x110>
 8003ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d00b      	beq.n	8003f04 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2290      	movs	r2, #144	; 0x90
 8003ef8:	589b      	ldr	r3, [r3, r2]
 8003efa:	2202      	movs	r2, #2
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2190      	movs	r1, #144	; 0x90
 8003f02:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2290      	movs	r2, #144	; 0x90
 8003f08:	589b      	ldr	r3, [r3, r2]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	22a4      	movs	r2, #164	; 0xa4
 8003f12:	589b      	ldr	r3, [r3, r2]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	0010      	movs	r0, r2
 8003f18:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2290      	movs	r2, #144	; 0x90
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	225e      	movs	r2, #94	; 0x5e
 8003f26:	5a9b      	ldrh	r3, [r3, r2]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d176      	bne.n	800401c <UART_RxISR_16BIT_FIFOEN+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f38:	2301      	movs	r3, #1
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4962      	ldr	r1, [pc, #392]	; (80040d8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f5a:	f383 8810 	msr	PRIMASK, r3
}
 8003f5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f60:	f3ef 8310 	mrs	r3, PRIMASK
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f70:	f383 8810 	msr	PRIMASK, r3
}
 8003f74:	46c0      	nop			; (mov r8, r8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4956      	ldr	r1, [pc, #344]	; (80040dc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8003f82:	400a      	ands	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
 8003f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f88:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	228c      	movs	r2, #140	; 0x8c
 8003f96:	2120      	movs	r1, #32
 8003f98:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d130      	bne.n	8004010 <UART_RxISR_16BIT_FIFOEN+0x21c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	f383 8810 	msr	PRIMASK, r3
}
 8003fc8:	46c0      	nop			; (mov r8, r8)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2110      	movs	r1, #16
 8003fd6:	438a      	bics	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe0:	f383 8810 	msr	PRIMASK, r3
}
 8003fe4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	2210      	movs	r2, #16
 8003fee:	4013      	ands	r3, r2
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d103      	bne.n	8003ffc <UART_RxISR_16BIT_FIFOEN+0x208>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2210      	movs	r2, #16
 8003ffa:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	22c0      	movs	r2, #192	; 0xc0
 8004000:	589b      	ldr	r3, [r3, r2]
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	215c      	movs	r1, #92	; 0x5c
 8004006:	5a51      	ldrh	r1, [r2, r1]
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	0010      	movs	r0, r2
 800400c:	4798      	blx	r3
 800400e:	e005      	b.n	800401c <UART_RxISR_16BIT_FIFOEN+0x228>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	22a0      	movs	r2, #160	; 0xa0
 8004014:	589b      	ldr	r3, [r3, r2]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	0010      	movs	r0, r2
 800401a:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800401c:	2366      	movs	r3, #102	; 0x66
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d004      	beq.n	8004030 <UART_RxISR_16BIT_FIFOEN+0x23c>
 8004026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004028:	2220      	movs	r2, #32
 800402a:	4013      	ands	r3, r2
 800402c:	d000      	beq.n	8004030 <UART_RxISR_16BIT_FIFOEN+0x23c>
 800402e:	e704      	b.n	8003e3a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004030:	2052      	movs	r0, #82	; 0x52
 8004032:	183b      	adds	r3, r7, r0
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	215e      	movs	r1, #94	; 0x5e
 8004038:	5a52      	ldrh	r2, [r2, r1]
 800403a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800403c:	0001      	movs	r1, r0
 800403e:	187b      	adds	r3, r7, r1
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d044      	beq.n	80040d0 <UART_RxISR_16BIT_FIFOEN+0x2dc>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2268      	movs	r2, #104	; 0x68
 800404a:	5a9b      	ldrh	r3, [r3, r2]
 800404c:	187a      	adds	r2, r7, r1
 800404e:	8812      	ldrh	r2, [r2, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d23d      	bcs.n	80040d0 <UART_RxISR_16BIT_FIFOEN+0x2dc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004054:	f3ef 8310 	mrs	r3, PRIMASK
 8004058:	60fb      	str	r3, [r7, #12]
  return(result);
 800405a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800405e:	2301      	movs	r3, #1
 8004060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f383 8810 	msr	PRIMASK, r3
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	491a      	ldr	r1, [pc, #104]	; (80040e0 <UART_RxISR_16BIT_FIFOEN+0x2ec>)
 8004076:	400a      	ands	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800407c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <UART_RxISR_16BIT_FIFOEN+0x2f0>)
 800408a:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408c:	f3ef 8310 	mrs	r3, PRIMASK
 8004090:	61bb      	str	r3, [r7, #24]
  return(result);
 8004092:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004094:	64bb      	str	r3, [r7, #72]	; 0x48
 8004096:	2301      	movs	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2120      	movs	r1, #32
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	f383 8810 	msr	PRIMASK, r3
}
 80040bc:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040be:	e007      	b.n	80040d0 <UART_RxISR_16BIT_FIFOEN+0x2dc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2108      	movs	r1, #8
 80040cc:	430a      	orrs	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]
}
 80040d0:	46c0      	nop			; (mov r8, r8)
 80040d2:	46bd      	mov	sp, r7
 80040d4:	b01e      	add	sp, #120	; 0x78
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	fffffeff 	.word	0xfffffeff
 80040dc:	effffffe 	.word	0xeffffffe
 80040e0:	efffffff 	.word	0xefffffff
 80040e4:	08003989 	.word	0x08003989

080040e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004118:	b5b0      	push	{r4, r5, r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	1dbb      	adds	r3, r7, #6
 8004124:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	228c      	movs	r2, #140	; 0x8c
 800412a:	589b      	ldr	r3, [r3, r2]
 800412c:	2b20      	cmp	r3, #32
 800412e:	d156      	bne.n	80041de <HAL_UARTEx_ReceiveToIdle_IT+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8004136:	1dbb      	adds	r3, r7, #6
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e04e      	b.n	80041e0 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	015b      	lsls	r3, r3, #5
 800414a:	429a      	cmp	r2, r3
 800414c:	d109      	bne.n	8004162 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2201      	movs	r2, #1
 800415a:	4013      	ands	r3, r2
 800415c:	d001      	beq.n	8004162 <HAL_UARTEx_ReceiveToIdle_IT+0x4a>
      {
        return  HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e03e      	b.n	80041e0 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2201      	movs	r2, #1
 8004166:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800416e:	2527      	movs	r5, #39	; 0x27
 8004170:	197c      	adds	r4, r7, r5
 8004172:	1dbb      	adds	r3, r7, #6
 8004174:	881a      	ldrh	r2, [r3, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	0018      	movs	r0, r3
 800417c:	f7fe ffce 	bl	800311c <UART_Start_Receive_IT>
 8004180:	0003      	movs	r3, r0
 8004182:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004184:	197b      	adds	r3, r7, r5
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d124      	bne.n	80041d6 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004190:	2b01      	cmp	r3, #1
 8004192:	d11c      	bne.n	80041ce <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2210      	movs	r2, #16
 800419a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419c:	f3ef 8310 	mrs	r3, PRIMASK
 80041a0:	617b      	str	r3, [r7, #20]
  return(result);
 80041a2:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a4:	623b      	str	r3, [r7, #32]
 80041a6:	2301      	movs	r3, #1
 80041a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	f383 8810 	msr	PRIMASK, r3
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2110      	movs	r1, #16
 80041be:	430a      	orrs	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f383 8810 	msr	PRIMASK, r3
}
 80041cc:	e003      	b.n	80041d6 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80041ce:	2327      	movs	r3, #39	; 0x27
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	2201      	movs	r2, #1
 80041d4:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80041d6:	2327      	movs	r3, #39	; 0x27
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	e000      	b.n	80041e0 <HAL_UARTEx_ReceiveToIdle_IT+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
  }
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b00a      	add	sp, #40	; 0x28
 80041e6:	bdb0      	pop	{r4, r5, r7, pc}

080041e8 <__libc_init_array>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	2600      	movs	r6, #0
 80041ec:	4d0c      	ldr	r5, [pc, #48]	; (8004220 <__libc_init_array+0x38>)
 80041ee:	4c0d      	ldr	r4, [pc, #52]	; (8004224 <__libc_init_array+0x3c>)
 80041f0:	1b64      	subs	r4, r4, r5
 80041f2:	10a4      	asrs	r4, r4, #2
 80041f4:	42a6      	cmp	r6, r4
 80041f6:	d109      	bne.n	800420c <__libc_init_array+0x24>
 80041f8:	2600      	movs	r6, #0
 80041fa:	f000 f82b 	bl	8004254 <_init>
 80041fe:	4d0a      	ldr	r5, [pc, #40]	; (8004228 <__libc_init_array+0x40>)
 8004200:	4c0a      	ldr	r4, [pc, #40]	; (800422c <__libc_init_array+0x44>)
 8004202:	1b64      	subs	r4, r4, r5
 8004204:	10a4      	asrs	r4, r4, #2
 8004206:	42a6      	cmp	r6, r4
 8004208:	d105      	bne.n	8004216 <__libc_init_array+0x2e>
 800420a:	bd70      	pop	{r4, r5, r6, pc}
 800420c:	00b3      	lsls	r3, r6, #2
 800420e:	58eb      	ldr	r3, [r5, r3]
 8004210:	4798      	blx	r3
 8004212:	3601      	adds	r6, #1
 8004214:	e7ee      	b.n	80041f4 <__libc_init_array+0xc>
 8004216:	00b3      	lsls	r3, r6, #2
 8004218:	58eb      	ldr	r3, [r5, r3]
 800421a:	4798      	blx	r3
 800421c:	3601      	adds	r6, #1
 800421e:	e7f2      	b.n	8004206 <__libc_init_array+0x1e>
 8004220:	08004304 	.word	0x08004304
 8004224:	08004304 	.word	0x08004304
 8004228:	08004304 	.word	0x08004304
 800422c:	08004308 	.word	0x08004308

08004230 <memcpy>:
 8004230:	2300      	movs	r3, #0
 8004232:	b510      	push	{r4, lr}
 8004234:	429a      	cmp	r2, r3
 8004236:	d100      	bne.n	800423a <memcpy+0xa>
 8004238:	bd10      	pop	{r4, pc}
 800423a:	5ccc      	ldrb	r4, [r1, r3]
 800423c:	54c4      	strb	r4, [r0, r3]
 800423e:	3301      	adds	r3, #1
 8004240:	e7f8      	b.n	8004234 <memcpy+0x4>

08004242 <memset>:
 8004242:	0003      	movs	r3, r0
 8004244:	1882      	adds	r2, r0, r2
 8004246:	4293      	cmp	r3, r2
 8004248:	d100      	bne.n	800424c <memset+0xa>
 800424a:	4770      	bx	lr
 800424c:	7019      	strb	r1, [r3, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	e7f9      	b.n	8004246 <memset+0x4>
	...

08004254 <_init>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr

08004260 <_fini>:
 8004260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004266:	bc08      	pop	{r3}
 8004268:	469e      	mov	lr, r3
 800426a:	4770      	bx	lr
